
phase_detector_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000070  08005b44  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  08005b44  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d50c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251d  00000000  00000000  0002d5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019431  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0b2  00000000  00000000  0004a9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ccb3  00000000  00000000  00059a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  000e6788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080057b8 	.word	0x080057b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080057b8 	.word	0x080057b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1);
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	2301      	movs	r3, #1
 8000904:	2201      	movs	r2, #1
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <__io_putchar+0x20>)
 8000908:	f002 fa1e 	bl	8002d48 <HAL_UART_Transmit>
  return ch;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000015c 	.word	0x2000015c

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000922:	f000 fc61 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f821 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f92f 	bl	8000b8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800092e:	f000 f8af 	bl	8000a90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000932:	f000 f8d7 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000936:	f000 f8ff 	bl	8000b38 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800093a:	f000 f85d 	bl	80009f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Logi("Main app running");
 800093e:	f000 fcab 	bl	8001298 <HAL_GetTick>
 8000942:	4602      	mov	r2, r0
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <main+0x44>)
 8000946:	236a      	movs	r3, #106	; 0x6a
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	460b      	mov	r3, r1
 800094c:	4905      	ldr	r1, [pc, #20]	; (8000964 <main+0x48>)
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <main+0x4c>)
 8000950:	f003 fff0 	bl	8004934 <iprintf>
  appMeasureInit();
 8000954:	f003 fa40 	bl	8003dd8 <appMeasureInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  processMeasure();
 8000958:	f003 f864 	bl	8003a24 <processMeasure>
  {
 800095c:	e7fc      	b.n	8000958 <main+0x3c>
 800095e:	bf00      	nop
 8000960:	080057dc 	.word	0x080057dc
 8000964:	080057e4 	.word	0x080057e4
 8000968:	080057f0 	.word	0x080057f0

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fef6 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f909 	bl	8001bcc <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009c0:	f000 f972 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fb76 	bl	80020d0 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ea:	f000 f95d 	bl	8000ca8 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3740      	adds	r7, #64	; 0x40
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a1c:	2247      	movs	r2, #71	; 0x47
 8000a1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a28:	2263      	movs	r2, #99	; 0x63
 8000a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a3a:	f001 fce1 	bl	8002400 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000a44:	f000 f930 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a56:	f001 feab 	bl	80027b0 <HAL_TIM_ConfigClockSource>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000a60:	f000 f922 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_TIM4_Init+0x90>)
 8000a72:	f002 f87d 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000a7c:	f000 f914 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	40000800 	.word	0x40000800

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f002 f8c2 	bl	8002c50 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f8e9 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000d4 	.word	0x200000d4
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f002 f898 	bl	8002c50 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f8bf 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000118 	.word	0x20000118
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART3_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b70:	f002 f86e 	bl	8002c50 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f895 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000015c 	.word	0x2000015c
 8000b88:	40004800 	.word	0x40004800

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_GPIO_Init+0x108>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	482a      	ldr	r0, [pc, #168]	; (8000c98 <MX_GPIO_Init+0x10c>)
 8000bf0:	f000 ffbc 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2138      	movs	r1, #56	; 0x38
 8000bf8:	4828      	ldr	r0, [pc, #160]	; (8000c9c <MX_GPIO_Init+0x110>)
 8000bfa:	f000 ffb7 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000bfe:	23e0      	movs	r3, #224	; 0xe0
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_GPIO_Init+0x114>)
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <MX_GPIO_Init+0x10c>)
 8000c12:	f000 fd6b 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_GPIO_Init+0x118>)
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <MX_GPIO_Init+0x10c>)
 8000c2c:	f000 fd5e 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_GPIO_Init+0x10c>)
 8000c4a:	f000 fd4f 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8000c4e:	2338      	movs	r3, #56	; 0x38
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_GPIO_Init+0x110>)
 8000c66:	f000 fd41 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2017      	movs	r0, #23
 8000c70:	f000 fc3b 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c74:	2017      	movs	r0, #23
 8000c76:	f000 fc54 	bl	8001522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2028      	movs	r0, #40	; 0x28
 8000c80:	f000 fc33 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f000 fc4c 	bl	8001522 <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	10210000 	.word	0x10210000
 8000ca4:	10110000 	.word	0x10110000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x60>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_MspInit+0x60>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_TIM_Base_MspInit+0x44>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d113      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	201e      	movs	r0, #30
 8000d48:	f000 fbcf 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d4c:	201e      	movs	r0, #30
 8000d4e:	f000 fbe8 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40000800 	.word	0x40000800
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a5b      	ldr	r2, [pc, #364]	; (8000eec <HAL_UART_MspInit+0x188>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d13a      	bne.n	8000dfa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a59      	ldr	r2, [pc, #356]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a53      	ldr	r2, [pc, #332]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484a      	ldr	r0, [pc, #296]	; (8000ef4 <HAL_UART_MspInit+0x190>)
 8000dca:	f000 fc8f 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	4619      	mov	r1, r3
 8000de2:	4844      	ldr	r0, [pc, #272]	; (8000ef4 <HAL_UART_MspInit+0x190>)
 8000de4:	f000 fc82 	bl	80016ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2025      	movs	r0, #37	; 0x25
 8000dee:	f000 fb7c 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df2:	2025      	movs	r0, #37	; 0x25
 8000df4:	f000 fb95 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df8:	e074      	b.n	8000ee4 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d138      	bne.n	8000e76 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	61d3      	str	r3, [r2, #28]
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8000e34:	2304      	movs	r3, #4
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4619      	mov	r1, r3
 8000e46:	482b      	ldr	r0, [pc, #172]	; (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e48:	f000 fc50 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e60:	f000 fc44 	bl	80016ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f000 fb3e 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6e:	2026      	movs	r0, #38	; 0x26
 8000e70:	f000 fb57 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 8000e74:	e036      	b.n	8000ee4 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_UART_MspInit+0x198>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d131      	bne.n	8000ee4 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	61d3      	str	r3, [r2, #28]
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 8000eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480e      	ldr	r0, [pc, #56]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ec6:	f000 fc11 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8000eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ee0:	f000 fc04 	bl	80016ec <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	40004800 	.word	0x40004800
 8000f00:	40010c00 	.word	0x40010c00

08000f04 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_UART_MspDeInit+0x80>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10e      	bne.n	8000f34 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f20:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPS_TX_Pin|GPS_RX_Pin);
 8000f22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f26:	4819      	ldr	r0, [pc, #100]	; (8000f8c <HAL_UART_MspDeInit+0x88>)
 8000f28:	f000 fd64 	bl	80019f4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000f2c:	2025      	movs	r0, #37	; 0x25
 8000f2e:	f000 fb06 	bl	800153e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000f32:	e022      	b.n	8000f7a <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <HAL_UART_MspDeInit+0x8c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10d      	bne.n	8000f5a <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f48:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, SIM_TX_Pin|SIM_RX_Pin);
 8000f4a:	210c      	movs	r1, #12
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <HAL_UART_MspDeInit+0x88>)
 8000f4e:	f000 fd51 	bl	80019f4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000f52:	2026      	movs	r0, #38	; 0x26
 8000f54:	f000 faf3 	bl	800153e <HAL_NVIC_DisableIRQ>
}
 8000f58:	e00f      	b.n	8000f7a <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_UART_MspDeInit+0x90>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10a      	bne.n	8000f7a <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_UART_MspDeInit+0x84>)
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6e:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, DBG_TX_Pin|DBG_RX_Pin);
 8000f70:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_UART_MspDeInit+0x94>)
 8000f76:	f000 fd3d 	bl	80019f4 <HAL_GPIO_DeInit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40004800 	.word	0x40004800
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f947 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_Pin);
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f000 fdd4 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L2_Pin);
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	f000 fdd1 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L3_Pin);
 8000ffa:	2080      	movs	r0, #128	; 0x80
 8000ffc:	f000 fdce 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM4_IRQHandler+0x10>)
 800100a:	f001 fac9 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000008c 	.word	0x2000008c

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART1_IRQHandler+0x10>)
 800101e:	f001 ffb1 	bl	8002f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000d4 	.word	0x200000d4

0800102c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART2_IRQHandler+0x10>)
 8001032:	f001 ffa7 	bl	8002f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000118 	.word	0x20000118

08001040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPS_PPS_Pin);
 8001044:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001048:	f000 fda8 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001062:	f3af 8000 	nop.w
 8001066:	4601      	mov	r1, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	b2ca      	uxtb	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <_read+0x12>
	}

return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e009      	b.n	80010b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fc27 	bl	80008f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf1      	blt.n	800109c <_write+0x12>
	}
	return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_close>:

int _close(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e8:	605a      	str	r2, [r3, #4]
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f003 fae0 	bl	8004718 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20005000 	.word	0x20005000
 8001184:	00000400 	.word	0x00000400
 8001188:	200001a0 	.word	0x200001a0
 800118c:	20000a08 	.word	0x20000a08

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 faad 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fba7 	bl	800091c <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d8:	08005ad4 	.word	0x08005ad4
  ldr r2, =_sbss
 80011dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e0:	20000a08 	.word	0x20000a08

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f96b 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fd56 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f991 	bl	800155a <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f94b 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000008 	.word	0x20000008
 8001294:	200001a4 	.word	0x200001a4

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	200001a4 	.word	0x200001a4

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <__NVIC_EnableIRQ+0x34>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db12      	blt.n	80013c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	490a      	ldr	r1, [pc, #40]	; (80013d4 <__NVIC_DisableIRQ+0x44>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	3320      	adds	r3, #32
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
}
 80013c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff09 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff1e 	bl	800133c <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff11 	bl	8001358 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff1f 	bl	8001390 <__NVIC_DisableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff94 	bl	8001490 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001584:	2b02      	cmp	r3, #2
 8001586:	d008      	beq.n	800159a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2204      	movs	r2, #4
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e020      	b.n	80015dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020e 	bic.w	r2, r2, #14
 80015a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d005      	beq.n	800160a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2204      	movs	r2, #4
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e051      	b.n	80016ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 020e 	bic.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_DMA_Abort_IT+0xd0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d029      	beq.n	8001688 <HAL_DMA_Abort_IT+0xa0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_DMA_Abort_IT+0xd4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d022      	beq.n	8001684 <HAL_DMA_Abort_IT+0x9c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <HAL_DMA_Abort_IT+0xd8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d01a      	beq.n	800167e <HAL_DMA_Abort_IT+0x96>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_DMA_Abort_IT+0xdc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d012      	beq.n	8001678 <HAL_DMA_Abort_IT+0x90>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_DMA_Abort_IT+0xe0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00a      	beq.n	8001672 <HAL_DMA_Abort_IT+0x8a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_DMA_Abort_IT+0xe4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d102      	bne.n	800166c <HAL_DMA_Abort_IT+0x84>
 8001666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800166a:	e00e      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 800166c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001670:	e00b      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	e008      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	e005      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	e002      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001684:	2310      	movs	r3, #16
 8001686:	e000      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001688:	2301      	movs	r3, #1
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_DMA_Abort_IT+0xe8>)
 800168c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
    } 
  }
  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40020008 	.word	0x40020008
 80016bc:	4002001c 	.word	0x4002001c
 80016c0:	40020030 	.word	0x40020030
 80016c4:	40020044 	.word	0x40020044
 80016c8:	40020058 	.word	0x40020058
 80016cc:	4002006c 	.word	0x4002006c
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001a02:	e09a      	b.n	8001b3a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 808d 	beq.w	8001b34 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001a1a:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_DeInit+0x160>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_GPIO_DeInit+0x164>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_DeInit+0x78>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_GPIO_DeInit+0x168>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_DeInit+0x74>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_GPIO_DeInit+0x16c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_DeInit+0x70>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_GPIO_DeInit+0x170>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_DeInit+0x6c>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_DeInit+0x7a>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_DeInit+0x7a>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_DeInit+0x7a>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_DeInit+0x7a>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d132      	bne.n	8001ae4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001a8e:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <HAL_GPIO_DeInit+0x160>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	482d      	ldr	r0, [pc, #180]	; (8001b54 <HAL_GPIO_DeInit+0x160>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	492c      	ldr	r1, [pc, #176]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4929      	ldr	r1, [pc, #164]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4925      	ldr	r1, [pc, #148]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_GPIO_DeInit+0x174>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d801      	bhi.n	8001aee <HAL_GPIO_DeInit+0xfa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_DeInit+0xfe>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d802      	bhi.n	8001b00 <HAL_GPIO_DeInit+0x10c>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_DeInit+0x112>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3b08      	subs	r3, #8
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	2104      	movs	r1, #4
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	431a      	orrs	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f af5e 	bne.w	8001a04 <HAL_GPIO_DeInit+0x10>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40011400 	.word	0x40011400
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fe0a 	bl	80037d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e272      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e24c      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff faf6 	bl	8001298 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff faf2 	bl	8001298 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e200      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fae2 	bl	8001298 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fade 	bl	8001298 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1ec      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fa97 	bl	8001298 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa93 	bl	8001298 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa76 	bl	8001298 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa72 	bl	8001298 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e180      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa56 	bl	8001298 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fa52 	bl	8001298 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e160      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 fad8 	bl	80023c4 <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa3c 	bl	8001298 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa38 	bl	8001298 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e146      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a87      	ldr	r2, [pc, #540]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7e      	ldr	r2, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f9f9 	bl	8001298 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f9f5 	bl	8001298 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e103      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a60      	ldr	r2, [pc, #384]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f9a9 	bl	8001298 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff f9a5 	bl	8001298 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0b1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff f993 	bl	8001298 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff f98f 	bl	8001298 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e09b      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff f963 	bl	8001298 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f95f 	bl	8001298 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e06d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	491b      	ldr	r1, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff f933 	bl	8001298 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff f92f 	bl	8001298 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e035      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f91c 	bl	8001298 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f918 	bl	8001298 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e026      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e019      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x500>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff f86a 	bl	8001298 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff f866 	bl	8001298 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ffc8 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08005a10 	.word	0x08005a10
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b490      	push	{r4, r7}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCC_GetSysClockFreq+0xac>)
 80022ac:	1d3c      	adds	r4, r7, #4
 80022ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022b4:	f240 2301 	movw	r3, #513	; 0x201
 80022b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x40>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x46>
 80022e2:	e02b      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	e02b      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3328      	adds	r3, #40	; 0x28
 80022f4:	443b      	add	r3, r7
 80022f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	3328      	adds	r3, #40	; 0x28
 8002312:	443b      	add	r3, r7
 8002314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	623b      	str	r3, [r7, #32]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800233e:	623b      	str	r3, [r7, #32]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	6a3b      	ldr	r3, [r7, #32]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc90      	pop	{r4, r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	0800581c 	.word	0x0800581c
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08005a20 	.word	0x08005a20

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08005a20 	.word	0x08005a20

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000000 	.word	0x20000000
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fc76 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fa9e 	bl	8002980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e03a      	b.n	800252e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_TIM_Base_Start_IT+0x98>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00e      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d009      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_TIM_Base_Start_IT+0x9c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_TIM_Base_Start_IT+0xa0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d111      	bne.n	800251c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d010      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	e007      	b.n	800252c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800

08002544 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	f241 1311 	movw	r3, #4369	; 0x1111
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_TIM_Base_Stop_IT+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	f240 4344 	movw	r3, #1092	; 0x444
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_TIM_Base_Stop_IT+0x48>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9b1 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9a4 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9b3 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f987 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f97a 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f989 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f95d 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f950 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f95f 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f933 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f926 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f935 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f001 fb60 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa77 	bl	8002c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8f9 	bl	800296e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa42 	bl	8002c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_ConfigClockSource+0x18>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0b3      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x180>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002800:	d03e      	beq.n	8002880 <HAL_TIM_ConfigClockSource+0xd0>
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	f200 8087 	bhi.w	8002918 <HAL_TIM_ConfigClockSource+0x168>
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	f000 8085 	beq.w	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d87f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d01a      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xa2>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d87b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d050      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x116>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d877      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d03c      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0xf6>
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d873      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d058      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x136>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d86f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d064      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x156>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d86b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d060      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x156>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d867      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x156>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d05a      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002850:	e062      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f000 f966 	bl	8002b32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002874:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	609a      	str	r2, [r3, #8]
      break;
 800287e:	e04e      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f000 f94f 	bl	8002b32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a2:	609a      	str	r2, [r3, #8]
      break;
 80028a4:	e03b      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f8c6 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2150      	movs	r1, #80	; 0x50
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f91d 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 80028c4:	e02b      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 f8e4 	bl	8002aa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2160      	movs	r1, #96	; 0x60
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f90d 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 80028e4:	e01b      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8a6 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f8fd 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 8002904:	e00b      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f000 f8f4 	bl	8002afe <TIM_ITRx_SetConfig>
        break;
 8002916:	e002      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800291c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <TIM_Base_SetConfig+0xb8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00b      	beq.n	80029b0 <TIM_Base_SetConfig+0x30>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0x30>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <TIM_Base_SetConfig+0xbc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0x30>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_Base_SetConfig+0xc0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <TIM_Base_SetConfig+0xb8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00b      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d007      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <TIM_Base_SetConfig+0xbc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d003      	beq.n	80029e2 <TIM_Base_SetConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <TIM_Base_SetConfig+0xc0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d108      	bne.n	80029f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <TIM_Base_SetConfig+0xb8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d103      	bne.n	8002a28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	615a      	str	r2, [r3, #20]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 030a 	bic.w	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0210 	bic.w	r2, r3, #16
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	031b      	lsls	r3, r3, #12
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002adc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 0307 	orr.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e046      	b.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d009      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800

08002c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e03f      	b.n	8002ce2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe f874 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fd0f 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e021      	b.n	8002d40 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d12:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fe f8f5 	bl	8000f04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d17c      	bne.n	8002e62 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_UART_Transmit+0x2c>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e075      	b.n	8002e64 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Transmit+0x3e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e06e      	b.n	8002e64 <HAL_UART_Transmit+0x11c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2221      	movs	r2, #33	; 0x21
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fa7c 	bl	8001298 <HAL_GetTick>
 8002da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	d108      	bne.n	8002dca <HAL_UART_Transmit+0x82>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e003      	b.n	8002dd2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dda:	e02a      	b.n	8002e32 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa93 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e036      	b.n	8002e64 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	3302      	adds	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e007      	b.n	8002e24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1cf      	bne.n	8002ddc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa63 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e006      	b.n	8002e64 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d11d      	bne.n	8002ec2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_UART_Receive_IT+0x26>
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e016      	b.n	8002ec4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Receive_IT+0x38>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e00f      	b.n	8002ec4 <HAL_UART_Receive_IT+0x58>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa74 	bl	80033a6 <UART_Start_Receive_IT>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ee2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d024      	beq.n	8002f64 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2200      	movs	r2, #0
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fb17 	bl	8001572 <HAL_DMA_Abort>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fbc0 	bl	80016d4 <HAL_DMA_GetError>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e00a      	b.n	8002f7a <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x52>
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fac9 	bl	8003566 <UART_Receive_IT>
      return;
 8002fd4:	e17b      	b.n	80032ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80b1 	beq.w	8003140 <HAL_UART_IRQHandler+0x1bc>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x70>
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a6 	beq.w	8003140 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_UART_IRQHandler+0x90>
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_UART_IRQHandler+0xb0>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_UART_IRQHandler+0xd0>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00f      	beq.n	800307e <HAL_UART_IRQHandler+0xfa>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <HAL_UART_IRQHandler+0xee>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 811e 	beq.w	80032c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_UART_IRQHandler+0x11e>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa62 	bl	8003566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <HAL_UART_IRQHandler+0x146>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d031      	beq.n	800312e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9a4 	bl	8003418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d023      	beq.n	8003126 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d013      	beq.n	800311e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	4a76      	ldr	r2, [pc, #472]	; (80032d4 <HAL_UART_IRQHandler+0x350>)
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fa70 	bl	80015e8 <HAL_DMA_Abort_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003118:	4610      	mov	r0, r2
 800311a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e00e      	b.n	800313c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8e3 	bl	80032ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e00a      	b.n	800313c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8df 	bl	80032ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312c:	e006      	b.n	800313c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8db 	bl	80032ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800313a:	e0c3      	b.n	80032c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	bf00      	nop
    return;
 800313e:	e0c1      	b.n	80032c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	2b01      	cmp	r3, #1
 8003146:	f040 80a1 	bne.w	800328c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 809b 	beq.w	800328c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8095 	beq.w	800328c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d04e      	beq.n	8003224 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003190:	8a3b      	ldrh	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8098 	beq.w	80032c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319c:	8a3a      	ldrh	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	f080 8092 	bcs.w	80032c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8a3a      	ldrh	r2, [r7, #16]
 80031a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d02b      	beq.n	800320c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0210 	bic.w	r2, r2, #16
 8003200:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f9b3 	bl	8001572 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003214:	b29b      	uxth	r3, r3
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	b29b      	uxth	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f86d 	bl	80032fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003222:	e051      	b.n	80032c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800322c:	b29b      	uxth	r3, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d047      	beq.n	80032cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800323c:	8a7b      	ldrh	r3, [r7, #18]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003250:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0210 	bic.w	r2, r2, #16
 800327e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003280:	8a7b      	ldrh	r3, [r7, #18]
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f839 	bl	80032fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800328a:	e01f      	b.n	80032cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_UART_IRQHandler+0x324>
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8f9 	bl	8003498 <UART_Transmit_IT>
    return;
 80032a6:	e012      	b.n	80032ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_UART_IRQHandler+0x34a>
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f93a 	bl	8003536 <UART_EndTransmit_IT>
    return;
 80032c2:	e004      	b.n	80032ce <HAL_UART_IRQHandler+0x34a>
    return;
 80032c4:	bf00      	nop
 80032c6:	e002      	b.n	80032ce <HAL_UART_IRQHandler+0x34a>
      return;
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <HAL_UART_IRQHandler+0x34a>
      return;
 80032cc:	bf00      	nop
  }
}
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	08003471 	.word	0x08003471

080032d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	e02c      	b.n	800337e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d028      	beq.n	800337e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x30>
 8003332:	f7fd ffb1 	bl	8001298 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	429a      	cmp	r2, r3
 8003340:	d21d      	bcs.n	800337e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003350:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e00f      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d0c3      	beq.n	8003324 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	4613      	mov	r3, r2
 80033b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2222      	movs	r2, #34	; 0x22
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800342e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0210 	bic.w	r2, r2, #16
 8003456:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff2d 	bl	80032ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b21      	cmp	r3, #33	; 0x21
 80034aa:	d13e      	bne.n	800352a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d114      	bne.n	80034e0 <UART_Transmit_IT+0x48>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]
 80034de:	e008      	b.n	80034f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1c59      	adds	r1, r3, #1
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6211      	str	r1, [r2, #32]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4619      	mov	r1, r3
 8003500:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003514:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff febe 	bl	80032d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b22      	cmp	r3, #34	; 0x22
 8003578:	f040 8099 	bne.w	80036ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003584:	d117      	bne.n	80035b6 <UART_Receive_IT+0x50>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
 80035b4:	e026      	b.n	8003604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d007      	beq.n	80035da <UART_Receive_IT+0x74>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <UART_Receive_IT+0x82>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e008      	b.n	80035fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4619      	mov	r1, r3
 8003612:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003614:	2b00      	cmp	r3, #0
 8003616:	d148      	bne.n	80036aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0220 	bic.w	r2, r2, #32
 8003626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	d123      	bne.n	80036a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0210 	bic.w	r2, r2, #16
 800366c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d10a      	bne.n	8003692 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe2f 	bl	80032fc <HAL_UARTEx_RxEventCallback>
 800369e:	e002      	b.n	80036a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fbb7 	bl	8003e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e002      	b.n	80036b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036f2:	f023 030c 	bic.w	r3, r3, #12
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <UART_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d103      	bne.n	8003728 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe fe3c 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	e002      	b.n	800372e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003728:	f7fe fe24 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 800372c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <UART_SetConfig+0x118>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	0119      	lsls	r1, r3, #4
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <UART_SetConfig+0x118>)
 8003766:	fba3 0302 	umull	r0, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2064      	movs	r0, #100	; 0x64
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <UART_SetConfig+0x118>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	4419      	add	r1, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fbb2 f2f3 	udiv	r2, r2, r3
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <UART_SetConfig+0x118>)
 800379e:	fba3 0302 	umull	r0, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2064      	movs	r0, #100	; 0x64
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <UART_SetConfig+0x118>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	440a      	add	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40013800 	.word	0x40013800
 80037d0:	51eb851f 	.word	0x51eb851f

080037d4 <HAL_GPIO_EXTI_Callback>:
measureData_t measureData[SAMPLE_CNT] = {0};

extern bool MQTT_Connected;
extern bool endNmea;
extern nmeaData_t EvtData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPS_PPS_Pin) {
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e4:	d124      	bne.n	8003830 <HAL_GPIO_EXTI_Callback+0x5c>
		if (!fix_gps)
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <HAL_GPIO_EXTI_Callback+0x20>
			fix_gps = true;
 80037ee:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
		if (startSample && !start_timer) {
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_GPIO_EXTI_Callback+0x110>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d06c      	beq.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x114>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d168      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
			tick = 0;
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
			lastTick[0] = 0;
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
			lastTick[1] = 0;
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003812:	2200      	movs	r2, #0
 8003814:	605a      	str	r2, [r3, #4]
			lastTick[2] = 0;
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
			HAL_TIM_Base_Start_IT(&htim4);
 800381c:	4835      	ldr	r0, [pc, #212]	; (80038f4 <HAL_GPIO_EXTI_Callback+0x120>)
 800381e:	f7fe fe3f 	bl	80024a0 <HAL_TIM_Base_Start_IT>
			start_timer = 1;
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x114>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
			start_phaseA = 0;
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x124>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
			phaseC_time[phaseC_cnt++] = (uint16_t)(tick - lastTick[2]);
			lastTick[2] = tick;
		}
#endif
	}
}
 800382e:	e052      	b.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
	else if (GPIO_Pin == L1_Pin) {
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b20      	cmp	r3, #32
 8003834:	d118      	bne.n	8003868 <HAL_GPIO_EXTI_Callback+0x94>
		if (start_timer == 1) {
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x114>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d14b      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
			phaseA_time[phaseA_cnt++] = (uint16_t)(tick - lastTick[0]);
 800383e:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b299      	uxth	r1, r3
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_GPIO_EXTI_Callback+0x128>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	1c58      	adds	r0, r3, #1
 8003850:	4c2a      	ldr	r4, [pc, #168]	; (80038fc <HAL_GPIO_EXTI_Callback+0x128>)
 8003852:	6020      	str	r0, [r4, #0]
 8003854:	1a8a      	subs	r2, r1, r2
 8003856:	b291      	uxth	r1, r2
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <HAL_GPIO_EXTI_Callback+0x12c>)
 800385a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lastTick[0] = tick;
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003864:	6013      	str	r3, [r2, #0]
}
 8003866:	e036      	b.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
	else if (GPIO_Pin == L2_Pin) {
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d118      	bne.n	80038a0 <HAL_GPIO_EXTI_Callback+0xcc>
		if (start_timer == 1) {
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x114>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d12f      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
			phaseB_time[phaseB_cnt++] = (uint16_t)(tick - lastTick[1]);
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b299      	uxth	r1, r3
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	b29a      	uxth	r2, r3
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_GPIO_EXTI_Callback+0x130>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1c58      	adds	r0, r3, #1
 8003888:	4c1e      	ldr	r4, [pc, #120]	; (8003904 <HAL_GPIO_EXTI_Callback+0x130>)
 800388a:	6020      	str	r0, [r4, #0]
 800388c:	1a8a      	subs	r2, r1, r2
 800388e:	b291      	uxth	r1, r2
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_GPIO_EXTI_Callback+0x134>)
 8003892:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lastTick[1] = tick;
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800389c:	6053      	str	r3, [r2, #4]
}
 800389e:	e01a      	b.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
	else if (GPIO_Pin == L3_Pin) {
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d117      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
		if (start_timer == 1) {
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x114>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d113      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x102>
			phaseC_time[phaseC_cnt++] = (uint16_t)(tick - lastTick[2]);
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b299      	uxth	r1, r3
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_GPIO_EXTI_Callback+0x138>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c58      	adds	r0, r3, #1
 80038c0:	4c12      	ldr	r4, [pc, #72]	; (800390c <HAL_GPIO_EXTI_Callback+0x138>)
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	1a8a      	subs	r2, r1, r2
 80038c6:	b291      	uxth	r1, r2
 80038c8:	4a11      	ldr	r2, [pc, #68]	; (8003910 <HAL_GPIO_EXTI_Callback+0x13c>)
 80038ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lastTick[2] = tick;
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_GPIO_EXTI_Callback+0x118>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80038d4:	6093      	str	r3, [r2, #8]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd90      	pop	{r4, r7, pc}
 80038de:	bf00      	nop
 80038e0:	200001ac 	.word	0x200001ac
 80038e4:	200001b0 	.word	0x200001b0
 80038e8:	200001b4 	.word	0x200001b4
 80038ec:	200007c8 	.word	0x200007c8
 80038f0:	200007d4 	.word	0x200007d4
 80038f4:	2000008c 	.word	0x2000008c
 80038f8:	200001b8 	.word	0x200001b8
 80038fc:	200007bc 	.word	0x200007bc
 8003900:	200001bc 	.word	0x200001bc
 8003904:	200007c0 	.word	0x200007c0
 8003908:	200003bc 	.word	0x200003bc
 800390c:	200007c4 	.word	0x200007c4
 8003910:	200005bc 	.word	0x200005bc

08003914 <UartReInit>:

static bool UartReInit(uint32_t baud) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	bool ret = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_AbortReceive(&huart1);
 8003920:	480d      	ldr	r0, [pc, #52]	; (8003958 <UartReInit+0x44>)
 8003922:	f7ff fad3 	bl	8002ecc <HAL_UART_AbortReceive>
	HAL_UART_DeInit(&huart1);
 8003926:	480c      	ldr	r0, [pc, #48]	; (8003958 <UartReInit+0x44>)
 8003928:	f7ff f9df 	bl	8002cea <HAL_UART_DeInit>
	huart1.Init.BaudRate = baud;
 800392c:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <UartReInit+0x44>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart1) == HAL_OK) {
 8003932:	4809      	ldr	r0, [pc, #36]	; (8003958 <UartReInit+0x44>)
 8003934:	f7ff f98c 	bl	8002c50 <HAL_UART_Init>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <UartReInit+0x38>
		ret = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive_IT(&huart1, &gps_rx, 1);;
 8003942:	2201      	movs	r2, #1
 8003944:	4905      	ldr	r1, [pc, #20]	; (800395c <UartReInit+0x48>)
 8003946:	4804      	ldr	r0, [pc, #16]	; (8003958 <UartReInit+0x44>)
 8003948:	f7ff fa90 	bl	8002e6c <HAL_UART_Receive_IT>
	}
	return ret;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200000d4 	.word	0x200000d4
 800395c:	200001a8 	.word	0x200001a8

08003960 <findBaudRate>:
uint32_t findBaudRate(void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
	uint32_t baud[] = { 9600, 115200, 19200};
 8003966:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <findBaudRate+0xb0>)
 8003968:	463b      	mov	r3, r7
 800396a:	ca07      	ldmia	r2, {r0, r1, r2}
 800396c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t baudrate = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < (sizeof(baud)/sizeof(baud[0])); i++) {
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e042      	b.n	8003a00 <findBaudRate+0xa0>
		if (!UartReInit(baud[i])) continue;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3318      	adds	r3, #24
 8003980:	443b      	add	r3, r7
 8003982:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ffc4 	bl	8003914 <UartReInit>
 800398c:	4603      	mov	r3, r0
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d12f      	bne.n	80039f8 <findBaudRate+0x98>
		uint32_t start = HAL_GetTick();
 8003998:	f7fd fc7e 	bl	8001298 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]
		while (HAL_GetTick() - start < 5000) {
 800399e:	e00f      	b.n	80039c0 <findBaudRate+0x60>
			if (endNmea) {
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <findBaudRate+0xb4>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <findBaudRate+0x60>
				endNmea = false;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <findBaudRate+0xb4>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
				baudrate = baud[i];
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	3318      	adds	r3, #24
 80039b4:	443b      	add	r3, r7
 80039b6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80039ba:	613b      	str	r3, [r7, #16]
				return baudrate;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	e023      	b.n	8003a08 <findBaudRate+0xa8>
		while (HAL_GetTick() - start < 5000) {
 80039c0:	f7fd fc6a 	bl	8001298 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d9e6      	bls.n	80039a0 <findBaudRate+0x40>
			}
		}
		Logi("Try Baudrate = %ld timeout", baud[i]);
 80039d2:	f7fd fc61 	bl	8001298 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	490f      	ldr	r1, [pc, #60]	; (8003a18 <findBaudRate+0xb8>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3318      	adds	r3, #24
 80039e0:	443b      	add	r3, r7
 80039e2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2384      	movs	r3, #132	; 0x84
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	460b      	mov	r3, r1
 80039ee:	490b      	ldr	r1, [pc, #44]	; (8003a1c <findBaudRate+0xbc>)
 80039f0:	480b      	ldr	r0, [pc, #44]	; (8003a20 <findBaudRate+0xc0>)
 80039f2:	f000 ff9f 	bl	8004934 <iprintf>
 80039f6:	e000      	b.n	80039fa <findBaudRate+0x9a>
		if (!UartReInit(baud[i])) continue;
 80039f8:	bf00      	nop
	for (int i = 0; i < (sizeof(baud)/sizeof(baud[0])); i++) {
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d9b9      	bls.n	800397a <findBaudRate+0x1a>
	}
	return baudrate;
 8003a06:	693b      	ldr	r3, [r7, #16]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	08005888 	.word	0x08005888
 8003a14:	200008e9 	.word	0x200008e9
 8003a18:	08005838 	.word	0x08005838
 8003a1c:	08005848 	.word	0x08005848
 8003a20:	08005854 	.word	0x08005854

08003a24 <processMeasure>:
void processMeasure(void) {
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b08d      	sub	sp, #52	; 0x34
 8003a28:	af06      	add	r7, sp, #24
	static uint8_t fixStatus = 0;
	static int count = 0;
	if (phaseA_cnt >= 15 || phaseB_cnt >= 15 || phaseC_cnt >= 15) {
 8003a2a:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <processMeasure+0x268>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b0e      	cmp	r3, #14
 8003a30:	dc07      	bgt.n	8003a42 <processMeasure+0x1e>
 8003a32:	4b97      	ldr	r3, [pc, #604]	; (8003c90 <processMeasure+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b0e      	cmp	r3, #14
 8003a38:	dc03      	bgt.n	8003a42 <processMeasure+0x1e>
 8003a3a:	4b96      	ldr	r3, [pc, #600]	; (8003c94 <processMeasure+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b0e      	cmp	r3, #14
 8003a40:	dd2c      	ble.n	8003a9c <processMeasure+0x78>
		  phaseA_cnt = 0;
 8003a42:	4b92      	ldr	r3, [pc, #584]	; (8003c8c <processMeasure+0x268>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
		  phaseB_cnt = 0;
 8003a48:	4b91      	ldr	r3, [pc, #580]	; (8003c90 <processMeasure+0x26c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
		  phaseC_cnt = 0;
 8003a4e:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <processMeasure+0x270>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim4);
 8003a54:	4890      	ldr	r0, [pc, #576]	; (8003c98 <processMeasure+0x274>)
 8003a56:	f7fe fd75 	bl	8002544 <HAL_TIM_Base_Stop_IT>
		  start_timer = false;
 8003a5a:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <processMeasure+0x278>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
		  offset[0] = phaseA_time[0];
 8003a60:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <processMeasure+0x27c>)
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	4b8f      	ldr	r3, [pc, #572]	; (8003ca4 <processMeasure+0x280>)
 8003a66:	801a      	strh	r2, [r3, #0]
		  offset[1] = phaseB_time[0];
 8003a68:	4b8f      	ldr	r3, [pc, #572]	; (8003ca8 <processMeasure+0x284>)
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	4b8d      	ldr	r3, [pc, #564]	; (8003ca4 <processMeasure+0x280>)
 8003a6e:	805a      	strh	r2, [r3, #2]
		  offset[2] = phaseC_time[0];
 8003a70:	4b8e      	ldr	r3, [pc, #568]	; (8003cac <processMeasure+0x288>)
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <processMeasure+0x280>)
 8003a76:	809a      	strh	r2, [r3, #4]
		  memset(phaseA_time, 0, sizeof(phaseA_time));
 8003a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4888      	ldr	r0, [pc, #544]	; (8003ca0 <processMeasure+0x27c>)
 8003a80:	f000 fe74 	bl	800476c <memset>
		  memset(phaseB_time, 0, sizeof(phaseB_time));
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4887      	ldr	r0, [pc, #540]	; (8003ca8 <processMeasure+0x284>)
 8003a8c:	f000 fe6e 	bl	800476c <memset>
		  memset(phaseC_time, 0, sizeof(phaseC_time));
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	2100      	movs	r1, #0
 8003a96:	4885      	ldr	r0, [pc, #532]	; (8003cac <processMeasure+0x288>)
 8003a98:	f000 fe68 	bl	800476c <memset>
	}

	if (endNmea) {
 8003a9c:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <processMeasure+0x28c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80ef 	beq.w	8003c84 <processMeasure+0x260>
		endNmea = false;
 8003aa6:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <processMeasure+0x28c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
#if (NMEA_DEBUG)
		printf("%s\n", EvtData.buffer);
 8003aac:	4881      	ldr	r0, [pc, #516]	; (8003cb4 <processMeasure+0x290>)
 8003aae:	f000 ffc7 	bl	8004a40 <puts>
#endif
		lwgps_process(&nmea, EvtData.buffer, EvtData.size);
 8003ab2:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <processMeasure+0x290>)
 8003ab4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ab8:	461a      	mov	r2, r3
 8003aba:	497e      	ldr	r1, [pc, #504]	; (8003cb4 <processMeasure+0x290>)
 8003abc:	487e      	ldr	r0, [pc, #504]	; (8003cb8 <processMeasure+0x294>)
 8003abe:	f000 fd6a 	bl	8004596 <lwgps_process>
		if (nmea.is_valid != fixStatus) {
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <processMeasure+0x294>)
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <processMeasure+0x298>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d028      	beq.n	8003b20 <processMeasure+0xfc>
			fixStatus = nmea.is_valid;
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <processMeasure+0x294>)
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	4b7a      	ldr	r3, [pc, #488]	; (8003cbc <processMeasure+0x298>)
 8003ad4:	701a      	strb	r2, [r3, #0]
			if (nmea.is_valid) {
 8003ad6:	4b78      	ldr	r3, [pc, #480]	; (8003cb8 <processMeasure+0x294>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <processMeasure+0xd8>
				startSample = true;
 8003ade:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <processMeasure+0x29c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
				Logi("GNSS fix, start sample");
 8003ae4:	f7fd fbd8 	bl	8001298 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4976      	ldr	r1, [pc, #472]	; (8003cc4 <processMeasure+0x2a0>)
 8003aec:	23a3      	movs	r3, #163	; 0xa3
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	460b      	mov	r3, r1
 8003af2:	4975      	ldr	r1, [pc, #468]	; (8003cc8 <processMeasure+0x2a4>)
 8003af4:	4875      	ldr	r0, [pc, #468]	; (8003ccc <processMeasure+0x2a8>)
 8003af6:	f000 ff1d 	bl	8004934 <iprintf>
 8003afa:	e011      	b.n	8003b20 <processMeasure+0xfc>
			}
			else if (!nmea.is_valid) {
 8003afc:	4b6e      	ldr	r3, [pc, #440]	; (8003cb8 <processMeasure+0x294>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <processMeasure+0xfc>
				startSample = false;
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <processMeasure+0x29c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
				Logi("GNSS no fix, stop sample");
 8003b0a:	f7fd fbc5 	bl	8001298 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	496c      	ldr	r1, [pc, #432]	; (8003cc4 <processMeasure+0x2a0>)
 8003b12:	23a7      	movs	r3, #167	; 0xa7
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	460b      	mov	r3, r1
 8003b18:	496b      	ldr	r1, [pc, #428]	; (8003cc8 <processMeasure+0x2a4>)
 8003b1a:	486d      	ldr	r0, [pc, #436]	; (8003cd0 <processMeasure+0x2ac>)
 8003b1c:	f000 ff0a 	bl	8004934 <iprintf>
			}
		}
		if (startSample) {
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <processMeasure+0x29c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80ad 	beq.w	8003c84 <processMeasure+0x260>
			DateTime_t dt = {0};
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
			dt.year = nmea.year;
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <processMeasure+0x294>)
 8003b38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	81bb      	strh	r3, [r7, #12]
			dt.month = nmea.month;
 8003b40:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <processMeasure+0x294>)
 8003b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b46:	73bb      	strb	r3, [r7, #14]
			dt.day = nmea.date;
 8003b48:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <processMeasure+0x294>)
 8003b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b4e:	73fb      	strb	r3, [r7, #15]
			dt.hour = nmea.hours;
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <processMeasure+0x294>)
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	743b      	strb	r3, [r7, #16]
			dt.minute = nmea.minutes;
 8003b56:	4b58      	ldr	r3, [pc, #352]	; (8003cb8 <processMeasure+0x294>)
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	747b      	strb	r3, [r7, #17]
			dt.second = nmea.seconds;
 8003b5c:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <processMeasure+0x294>)
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	74bb      	strb	r3, [r7, #18]
			measureData[count].ts = dt2epoch(dt);
 8003b62:	4b5c      	ldr	r3, [pc, #368]	; (8003cd4 <processMeasure+0x2b0>)
 8003b64:	681c      	ldr	r4, [r3, #0]
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b6e:	f000 fa4d 	bl	800400c <dt2epoch>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4958      	ldr	r1, [pc, #352]	; (8003cd8 <processMeasure+0x2b4>)
 8003b76:	0123      	lsls	r3, r4, #4
 8003b78:	440b      	add	r3, r1
 8003b7a:	601a      	str	r2, [r3, #0]
			measureData[count].phaseA = offset[0];
 8003b7c:	4b55      	ldr	r3, [pc, #340]	; (8003cd4 <processMeasure+0x2b0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a48      	ldr	r2, [pc, #288]	; (8003ca4 <processMeasure+0x280>)
 8003b82:	8811      	ldrh	r1, [r2, #0]
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <processMeasure+0x2b4>)
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	801a      	strh	r2, [r3, #0]
			if (offset[1] > offset[2]) {
 8003b90:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <processMeasure+0x280>)
 8003b92:	885a      	ldrh	r2, [r3, #2]
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <processMeasure+0x280>)
 8003b96:	889b      	ldrh	r3, [r3, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d91c      	bls.n	8003bd6 <processMeasure+0x1b2>
				measureData[count].phaseB = offset[2];
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <processMeasure+0x2b0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <processMeasure+0x280>)
 8003ba2:	8891      	ldrh	r1, [r2, #4]
 8003ba4:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <processMeasure+0x2b4>)
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4413      	add	r3, r2
 8003baa:	3306      	adds	r3, #6
 8003bac:	460a      	mov	r2, r1
 8003bae:	801a      	strh	r2, [r3, #0]
				measureData[count].phaseC = offset[1];
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <processMeasure+0x2b0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <processMeasure+0x280>)
 8003bb6:	8851      	ldrh	r1, [r2, #2]
 8003bb8:	4a47      	ldr	r2, [pc, #284]	; (8003cd8 <processMeasure+0x2b4>)
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	460a      	mov	r2, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
				measureData[count].seq = "ACB";
 8003bc4:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <processMeasure+0x2b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <processMeasure+0x2b4>)
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4413      	add	r3, r2
 8003bce:	330c      	adds	r3, #12
 8003bd0:	4a42      	ldr	r2, [pc, #264]	; (8003cdc <processMeasure+0x2b8>)
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e01b      	b.n	8003c0e <processMeasure+0x1ea>
			}
			else {
				measureData[count].phaseB = offset[1];
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	; (8003cd4 <processMeasure+0x2b0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <processMeasure+0x280>)
 8003bdc:	8851      	ldrh	r1, [r2, #2]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <processMeasure+0x2b4>)
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4413      	add	r3, r2
 8003be4:	3306      	adds	r3, #6
 8003be6:	460a      	mov	r2, r1
 8003be8:	801a      	strh	r2, [r3, #0]
				measureData[count].phaseC = offset[2];
 8003bea:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <processMeasure+0x2b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <processMeasure+0x280>)
 8003bf0:	8891      	ldrh	r1, [r2, #4]
 8003bf2:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <processMeasure+0x2b4>)
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	801a      	strh	r2, [r3, #0]
				measureData[count].seq = "ABC";
 8003bfe:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <processMeasure+0x2b0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a35      	ldr	r2, [pc, #212]	; (8003cd8 <processMeasure+0x2b4>)
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	330c      	adds	r3, #12
 8003c0a:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <processMeasure+0x2bc>)
 8003c0c:	601a      	str	r2, [r3, #0]
			}
			Logi("Sample data on phase: [%ld] %d %d %d - %s", dt2epoch(dt),
 8003c0e:	f7fd fb43 	bl	8001298 <HAL_GetTick>
 8003c12:	4604      	mov	r4, r0
 8003c14:	4d2b      	ldr	r5, [pc, #172]	; (8003cc4 <processMeasure+0x2a0>)
 8003c16:	f107 030c 	add.w	r3, r7, #12
 8003c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c1e:	f000 f9f5 	bl	800400c <dt2epoch>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <processMeasure+0x280>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <processMeasure+0x280>)
 8003c2c:	885b      	ldrh	r3, [r3, #2]
 8003c2e:	461e      	mov	r6, r3
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <processMeasure+0x280>)
 8003c32:	889b      	ldrh	r3, [r3, #4]
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <processMeasure+0x2b0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4927      	ldr	r1, [pc, #156]	; (8003cd8 <processMeasure+0x2b4>)
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	440b      	add	r3, r1
 8003c40:	330c      	adds	r3, #12
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	9305      	str	r3, [sp, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	9304      	str	r3, [sp, #16]
 8003c4a:	9603      	str	r6, [sp, #12]
 8003c4c:	9002      	str	r0, [sp, #8]
 8003c4e:	9201      	str	r2, [sp, #4]
 8003c50:	23be      	movs	r3, #190	; 0xbe
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	462b      	mov	r3, r5
 8003c56:	4622      	mov	r2, r4
 8003c58:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <processMeasure+0x2a4>)
 8003c5a:	4822      	ldr	r0, [pc, #136]	; (8003ce4 <processMeasure+0x2c0>)
 8003c5c:	f000 fe6a 	bl	8004934 <iprintf>
					offset[0], offset[1], offset[2], measureData[count].seq);
			if (count < SAMPLE_CNT - 1) count++;
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <processMeasure+0x2b0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	dc05      	bgt.n	8003c74 <processMeasure+0x250>
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <processMeasure+0x2b0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <processMeasure+0x2b0>)
 8003c70:	6013      	str	r3, [r2, #0]
					measureData.phaseB, measureData.phaseC, measureData.seq);
			MQTT_Pub("topic/response", msg);
#endif
		}
	}
}
 8003c72:	e007      	b.n	8003c84 <processMeasure+0x260>
				count = 0;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <processMeasure+0x2b0>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
				memset(&measureData[0], 0, sizeof(measureData));
 8003c7a:	22a0      	movs	r2, #160	; 0xa0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4816      	ldr	r0, [pc, #88]	; (8003cd8 <processMeasure+0x2b4>)
 8003c80:	f000 fd74 	bl	800476c <memset>
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	200007bc 	.word	0x200007bc
 8003c90:	200007c0 	.word	0x200007c0
 8003c94:	200007c4 	.word	0x200007c4
 8003c98:	2000008c 	.word	0x2000008c
 8003c9c:	200001b4 	.word	0x200001b4
 8003ca0:	200001bc 	.word	0x200001bc
 8003ca4:	200007cc 	.word	0x200007cc
 8003ca8:	200003bc 	.word	0x200003bc
 8003cac:	200005bc 	.word	0x200005bc
 8003cb0:	200008e9 	.word	0x200008e9
 8003cb4:	200008f0 	.word	0x200008f0
 8003cb8:	200007e0 	.word	0x200007e0
 8003cbc:	200008e0 	.word	0x200008e0
 8003cc0:	200001b0 	.word	0x200001b0
 8003cc4:	08005838 	.word	0x08005838
 8003cc8:	08005848 	.word	0x08005848
 8003ccc:	08005894 	.word	0x08005894
 8003cd0:	080058c4 	.word	0x080058c4
 8003cd4:	200008e4 	.word	0x200008e4
 8003cd8:	20000840 	.word	0x20000840
 8003cdc:	080058f8 	.word	0x080058f8
 8003ce0:	080058fc 	.word	0x080058fc
 8003ce4:	08005900 	.word	0x08005900

08003ce8 <gnssInit>:
void gnssInit(void){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cf4:	482f      	ldr	r0, [pc, #188]	; (8003db4 <gnssInit+0xcc>)
 8003cf6:	f7fd ff39 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003cfa:	2064      	movs	r0, #100	; 0x64
 8003cfc:	f7fd fad6 	bl	80012ac <HAL_Delay>
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 1);
 8003d00:	2201      	movs	r2, #1
 8003d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d06:	482b      	ldr	r0, [pc, #172]	; (8003db4 <gnssInit+0xcc>)
 8003d08:	f7fd ff30 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_Delay(900);
 8003d0c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003d10:	f7fd facc 	bl	80012ac <HAL_Delay>
	lwgps_init(&nmea);
 8003d14:	4828      	ldr	r0, [pc, #160]	; (8003db8 <gnssInit+0xd0>)
 8003d16:	f000 fc30 	bl	800457a <lwgps_init>
	uint32_t baud = findBaudRate();
 8003d1a:	f7ff fe21 	bl	8003960 <findBaudRate>
 8003d1e:	60f8      	str	r0, [r7, #12]
	if (baud == 0)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d041      	beq.n	8003daa <gnssInit+0xc2>
		return;
	if (baud != 9600) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8003d2c:	d01e      	beq.n	8003d6c <gnssInit+0x84>
		Logi("current baudrate = %ld -> switch to 9600", baud);
 8003d2e:	f7fd fab3 	bl	8001298 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4921      	ldr	r1, [pc, #132]	; (8003dbc <gnssInit+0xd4>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	23d8      	movs	r3, #216	; 0xd8
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	491f      	ldr	r1, [pc, #124]	; (8003dc0 <gnssInit+0xd8>)
 8003d42:	4820      	ldr	r0, [pc, #128]	; (8003dc4 <gnssInit+0xdc>)
 8003d44:	f000 fdf6 	bl	8004934 <iprintf>
		uint8_t *cmd = (uint8_t*)"$PMTK251,9600*17\r\n";
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <gnssInit+0xe0>)
 8003d4a:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 1000);
 8003d4c:	68b8      	ldr	r0, [r7, #8]
 8003d4e:	f7fc f9fd 	bl	800014c <strlen>
 8003d52:	4603      	mov	r3, r0
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	481b      	ldr	r0, [pc, #108]	; (8003dcc <gnssInit+0xe4>)
 8003d5e:	f7fe fff3 	bl	8002d48 <HAL_UART_Transmit>
		UartReInit(9600);
 8003d62:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003d66:	f7ff fdd5 	bl	8003914 <UartReInit>
 8003d6a:	e00c      	b.n	8003d86 <gnssInit+0x9e>
	}
	else Logi("current baudrate = %ld", baud);
 8003d6c:	f7fd fa94 	bl	8001298 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4912      	ldr	r1, [pc, #72]	; (8003dbc <gnssInit+0xd4>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	23dd      	movs	r3, #221	; 0xdd
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4910      	ldr	r1, [pc, #64]	; (8003dc0 <gnssInit+0xd8>)
 8003d80:	4813      	ldr	r0, [pc, #76]	; (8003dd0 <gnssInit+0xe8>)
 8003d82:	f000 fdd7 	bl	8004934 <iprintf>
	HAL_Delay(1000);
 8003d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d8a:	f7fd fa8f 	bl	80012ac <HAL_Delay>
	uint8_t *cmd = (uint8_t*)"$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <gnssInit+0xec>)
 8003d90:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 1000);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc f9da 	bl	800014c <strlen>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	480a      	ldr	r0, [pc, #40]	; (8003dcc <gnssInit+0xe4>)
 8003da4:	f7fe ffd0 	bl	8002d48 <HAL_UART_Transmit>
 8003da8:	e000      	b.n	8003dac <gnssInit+0xc4>
		return;
 8003daa:	bf00      	nop
}
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40010800 	.word	0x40010800
 8003db8:	200007e0 	.word	0x200007e0
 8003dbc:	08005838 	.word	0x08005838
 8003dc0:	08005848 	.word	0x08005848
 8003dc4:	08005944 	.word	0x08005944
 8003dc8:	08005988 	.word	0x08005988
 8003dcc:	200000d4 	.word	0x200000d4
 8003dd0:	0800599c 	.word	0x0800599c
 8003dd4:	080059cc 	.word	0x080059cc

08003dd8 <appMeasureInit>:
void appMeasureInit(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	gnssInit();
 8003ddc:	f7ff ff84 	bl	8003ce8 <gnssInit>
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_PeriodElapsedCallback>:
bool endNmea = false;
int idx = 0;
nmeaData_t EvtData = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d104      	bne.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    tick++;
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003dfe:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	200007c8 	.word	0x200007c8

08003e14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	static uint8_t lastData = 0;
	if (huart == &huart1){
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <HAL_UART_RxCpltCallback+0xa8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d147      	bne.n	8003eb4 <HAL_UART_RxCpltCallback+0xa0>
		if (gps_rx == '$' && !begin) {
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b24      	cmp	r3, #36	; 0x24
 8003e2a:	d116      	bne.n	8003e5a <HAL_UART_RxCpltCallback+0x46>
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	f083 0301 	eor.w	r3, r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00f      	beq.n	8003e5a <HAL_UART_RxCpltCallback+0x46>
			begin = true;
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
			lastData = 0;
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_UART_RxCpltCallback+0xb8>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
			memset(&EvtData, 0 , sizeof(nmeaData_t));
 8003e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e50:	2100      	movs	r1, #0
 8003e52:	481f      	ldr	r0, [pc, #124]	; (8003ed0 <HAL_UART_RxCpltCallback+0xbc>)
 8003e54:	f000 fc8a 	bl	800476c <memset>
 8003e58:	e016      	b.n	8003e88 <HAL_UART_RxCpltCallback+0x74>
		}
		else if (gps_rx == 10 && lastData == 13 && begin) {
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b0a      	cmp	r3, #10
 8003e60:	d112      	bne.n	8003e88 <HAL_UART_RxCpltCallback+0x74>
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_UART_RxCpltCallback+0xb8>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b0d      	cmp	r3, #13
 8003e68:	d10e      	bne.n	8003e88 <HAL_UART_RxCpltCallback+0x74>
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_UART_RxCpltCallback+0x74>
			begin = false;
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
			endNmea = true;
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_UART_RxCpltCallback+0xc0>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
			EvtData.size = idx;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <HAL_UART_RxCpltCallback+0xbc>)
 8003e84:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
		if (begin) {
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_UART_RxCpltCallback+0x96>
			EvtData.buffer[idx++] = gps_rx;
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	490c      	ldr	r1, [pc, #48]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e98:	600a      	str	r2, [r1, #0]
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
 8003e9c:	7811      	ldrb	r1, [r2, #0]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <HAL_UART_RxCpltCallback+0xbc>)
 8003ea0:	54d1      	strb	r1, [r2, r3]
			lastData = gps_rx;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_UART_RxCpltCallback+0xb8>)
 8003ea8:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &gps_rx, 1);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
 8003eae:	4803      	ldr	r0, [pc, #12]	; (8003ebc <HAL_UART_RxCpltCallback+0xa8>)
 8003eb0:	f7fe ffdc 	bl	8002e6c <HAL_UART_Receive_IT>
	}
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	200000d4 	.word	0x200000d4
 8003ec0:	200001a8 	.word	0x200001a8
 8003ec4:	200008e8 	.word	0x200008e8
 8003ec8:	200008ec 	.word	0x200008ec
 8003ecc:	200009f4 	.word	0x200009f4
 8003ed0:	200008f0 	.word	0x200008f0
 8003ed4:	200008e9 	.word	0x200008e9

08003ed8 <date2days>:
#include "datetime.h"

const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	717b      	strb	r3, [r7, #5]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	713b      	strb	r3, [r7, #4]
    if (y >= 2000)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ef0:	d303      	bcc.n	8003efa <date2days+0x22>
        y -= 2000;
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003ef8:	80fb      	strh	r3, [r7, #6]
    uint16_t days = d;
 8003efa:	793b      	ldrb	r3, [r7, #4]
 8003efc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i) // Add number of days for each month
 8003efe:	2301      	movs	r3, #1
 8003f00:	737b      	strb	r3, [r7, #13]
 8003f02:	e00a      	b.n	8003f1a <date2days+0x42>
    {
        days += daysInMonth[i - 1];
 8003f04:	7b7b      	ldrb	r3, [r7, #13]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <date2days+0xd8>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	89fb      	ldrh	r3, [r7, #14]
 8003f10:	4413      	add	r3, r2
 8003f12:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i) // Add number of days for each month
 8003f14:	7b7b      	ldrb	r3, [r7, #13]
 8003f16:	3301      	adds	r3, #1
 8003f18:	737b      	strb	r3, [r7, #13]
 8003f1a:	7b7a      	ldrb	r2, [r7, #13]
 8003f1c:	797b      	ldrb	r3, [r7, #5]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3f0      	bcc.n	8003f04 <date2days+0x2c>
    }                        // of for-next loop for each month
    if (m > 2 && y % 4 == 0) // Deal with leap years
 8003f22:	797b      	ldrb	r3, [r7, #5]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d908      	bls.n	8003f3a <date2days+0x62>
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <date2days+0x62>
    {
        ++days;
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	3301      	adds	r3, #1
 8003f38:	81fb      	strh	r3, [r7, #14]
    }                                         // of if-then a leap year
    if (((y % 100) == 0) && ((y % 400) != 0)) // if / by 100 but not by 400 then it is not a l.y.
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <date2days+0xdc>)
 8003f3e:	fba2 1203 	umull	r1, r2, r2, r3
 8003f42:	0952      	lsrs	r2, r2, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f202 	mul.w	r2, r1, r2
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <date2days+0x9a>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <date2days+0xdc>)
 8003f56:	fba2 1203 	umull	r1, r2, r2, r3
 8003f5a:	09d2      	lsrs	r2, r2, #7
 8003f5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003f60:	fb01 f202 	mul.w	r2, r1, r2
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <date2days+0x9a>
    {
        --days;
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	81fb      	strh	r3, [r7, #14]
    }                                        // of if-then special leap year
    return days + 365 * y + (y + 3) / 4 - 1; // Return computed value
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	461a      	mov	r2, r3
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	441a      	add	r2, r3
 8003f7a:	00d2      	lsls	r2, r2, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	0091      	lsls	r1, r2, #2
 8003f82:	461a      	mov	r2, r3
 8003f84:	460b      	mov	r3, r1
 8003f86:	4413      	add	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	3303      	adds	r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da00      	bge.n	8003f9a <date2days+0xc2>
 8003f98:	3303      	adds	r3, #3
 8003f9a:	109b      	asrs	r3, r3, #2
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29b      	uxth	r3, r3
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	08005a28 	.word	0x08005a28
 8003fb4:	51eb851f 	.word	0x51eb851f

08003fb8 <time2long>:
static long time2long(uint16_t days, uint8_t h, uint8_t m, uint8_t s)
{
 8003fb8:	b490      	push	{r4, r7}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	80fb      	strh	r3, [r7, #6]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	717b      	strb	r3, [r7, #5]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	713b      	strb	r3, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	70fb      	strb	r3, [r7, #3]
    return ((days * 24L + h) * 60 + m) * 60 + s;
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	797b      	ldrb	r3, [r7, #5]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	793b      	ldrb	r3, [r7, #4]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	4413      	add	r3, r2
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bc90      	pop	{r4, r7}
 800400a:	4770      	bx	lr

0800400c <dt2epoch>:
    uint16_t temp = date2days(this->year, this->month, this->day);
    uint8_t dow = ((temp + 6) % 7);
    this->dayOfTheWeek = (dow == 0) ? 7 : dow; 
}
uint32_t dt2epoch(DateTime_t dt)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t days = date2days(dt.year, dt.month, dt.day);
 8004018:	88bb      	ldrh	r3, [r7, #4]
 800401a:	79b9      	ldrb	r1, [r7, #6]
 800401c:	79fa      	ldrb	r2, [r7, #7]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff5a 	bl	8003ed8 <date2days>
 8004024:	4603      	mov	r3, r0
 8004026:	82fb      	strh	r3, [r7, #22]
    uint32_t t = time2long(days, dt.hour, dt.minute, dt.second);
 8004028:	7a39      	ldrb	r1, [r7, #8]
 800402a:	7a7a      	ldrb	r2, [r7, #9]
 800402c:	7abb      	ldrb	r3, [r7, #10]
 800402e:	8af8      	ldrh	r0, [r7, #22]
 8004030:	f7ff ffc2 	bl	8003fb8 <time2long>
 8004034:	4603      	mov	r3, r0
 8004036:	613b      	str	r3, [r7, #16]
    t += SECS_1970_TO_2000;
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <dt2epoch+0x40>)
 800403c:	4413      	add	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    return t;
 8004040:	693b      	ldr	r3, [r7, #16]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	386d4380 	.word	0x386d4380

08004050 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <prv_parse_float_number+0x148>)
 800406c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8004070:	2301      	movs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3329      	adds	r3, #41	; 0x29
 800407e:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8004080:	e002      	b.n	8004088 <prv_parse_float_number+0x38>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <prv_parse_float_number+0x46>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b20      	cmp	r3, #32
 8004094:	d0f5      	beq.n	8004082 <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b2d      	cmp	r3, #45	; 0x2d
 800409c:	d124      	bne.n	80040e8 <prv_parse_float_number+0x98>
        sign = -1;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	60fb      	str	r3, [r7, #12]
        ++t;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 80040aa:	e01d      	b.n	80040e8 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	4b3a      	ldr	r3, [pc, #232]	; (800419c <prv_parse_float_number+0x14c>)
 80040b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040b6:	f7fc fa0d 	bl	80004d4 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	461d      	mov	r5, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	3b30      	subs	r3, #48	; 0x30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc f999 	bl	8000400 <__aeabi_i2d>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc f847 	bl	8000168 <__adddf3>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b2f      	cmp	r3, #47	; 0x2f
 80040ee:	d903      	bls.n	80040f8 <prv_parse_float_number+0xa8>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b39      	cmp	r3, #57	; 0x39
 80040f6:	d9d9      	bls.n	80040ac <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b2e      	cmp	r3, #46	; 0x2e
 80040fe:	d12c      	bne.n	800415a <prv_parse_float_number+0x10a>
        ++t;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 8004106:	e028      	b.n	800415a <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <prv_parse_float_number+0x14c>)
 800410e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004112:	f7fc f9df 	bl	80004d4 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4614      	mov	r4, r2
 800411c:	461d      	mov	r5, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	3b30      	subs	r3, #48	; 0x30
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc f96b 	bl	8000400 <__aeabi_i2d>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc f819 	bl	8000168 <__adddf3>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= 10.0;
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <prv_parse_float_number+0x14c>)
 8004144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004148:	f7fc f9c4 	bl	80004d4 <__aeabi_dmul>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b2f      	cmp	r3, #47	; 0x2f
 8004160:	d903      	bls.n	800416a <prv_parse_float_number+0x11a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b39      	cmp	r3, #57	; 0x39
 8004168:	d9ce      	bls.n	8004108 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7fc f948 	bl	8000400 <__aeabi_i2d>
 8004170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004174:	f7fc f9ae 	bl	80004d4 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004184:	f7fc fad0 	bl	8000728 <__aeabi_ddiv>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
}
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bdb0      	pop	{r4, r5, r7, pc}
 8004196:	bf00      	nop
 8004198:	3ff00000 	.word	0x3ff00000
 800419c:	40240000 	.word	0x40240000

080041a0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d11e      	bne.n	80041f0 <prv_parse_term+0x50>
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
            gh->p.stat = STAT_GSV;
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3329      	adds	r3, #41	; 0x29
 80041b6:	2206      	movs	r2, #6
 80041b8:	4985      	ldr	r1, [pc, #532]	; (80043d0 <prv_parse_term+0x230>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fc58 	bl	8004a70 <strncmp>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <prv_parse_term+0x3a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3329      	adds	r3, #41	; 0x29
 80041ca:	2206      	movs	r2, #6
 80041cc:	4981      	ldr	r1, [pc, #516]	; (80043d4 <prv_parse_term+0x234>)
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc4e 	bl	8004a70 <strncmp>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <prv_parse_term+0x44>
            gh->p.stat = STAT_RMC;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2204      	movs	r2, #4
 80041de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80041e2:	e003      	b.n	80041ec <prv_parse_term+0x4c>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }
        return 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0ea      	b.n	80043c6 <prv_parse_term+0x226>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80041f6:	2900      	cmp	r1, #0
 80041f8:	f000 80e4 	beq.w	80043c4 <prv_parse_term+0x224>
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004202:	2904      	cmp	r1, #4
 8004204:	f040 80d9 	bne.w	80043ba <prv_parse_term+0x21a>
        switch (gh->p.term_num) {
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
 800420e:	3901      	subs	r1, #1
 8004210:	290a      	cmp	r1, #10
 8004212:	f200 80d4 	bhi.w	80043be <prv_parse_term+0x21e>
 8004216:	a001      	add	r0, pc, #4	; (adr r0, 800421c <prv_parse_term+0x7c>)
 8004218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800421c:	08004249 	.word	0x08004249
 8004220:	080042c3 	.word	0x080042c3
 8004224:	080043bf 	.word	0x080043bf
 8004228:	080043bf 	.word	0x080043bf
 800422c:	080043bf 	.word	0x080043bf
 8004230:	080043bf 	.word	0x080043bf
 8004234:	080042dd 	.word	0x080042dd
 8004238:	080042f1 	.word	0x080042f1
 800423c:	08004305 	.word	0x08004305
 8004240:	0800437f 	.word	0x0800437f
 8004244:	08004393 	.word	0x08004393
       		case 1: /* Process valid status */
                gh->p.data.rmc.hours = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800424e:	3b30      	subs	r3, #48	; 0x30
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	0092      	lsls	r2, r2, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004262:	4413      	add	r3, r2
 8004264:	b2db      	uxtb	r3, r3
 8004266:	3b30      	subs	r3, #48	; 0x30
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                gh->p.data.rmc.minutes = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004276:	3b30      	subs	r3, #48	; 0x30
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	4413      	add	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800428a:	4413      	add	r3, r2
 800428c:	b2db      	uxtb	r3, r3
 800428e:	3b30      	subs	r3, #48	; 0x30
 8004290:	b2da      	uxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                gh->p.data.rmc.seconds = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800429e:	3b30      	subs	r3, #48	; 0x30
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80042b2:	4413      	add	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3b30      	subs	r3, #48	; 0x30
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
            	break;
 80042c0:	e080      	b.n	80043c4 <prv_parse_term+0x224>
            case 2: /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042c8:	2b41      	cmp	r3, #65	; 0x41
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                break;
 80042da:	e073      	b.n	80043c4 <prv_parse_term+0x224>
            case 7: /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80042dc:	2100      	movs	r1, #0
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff feb6 	bl	8004050 <prv_parse_float_number>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                break;
 80042ee:	e069      	b.n	80043c4 <prv_parse_term+0x224>
            case 8: /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff feac 	bl	8004050 <prv_parse_float_number>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                break;
 8004302:	e05f      	b.n	80043c4 <prv_parse_term+0x224>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800430a:	3b30      	subs	r3, #48	; 0x30
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	0092      	lsls	r2, r2, #2
 8004312:	4413      	add	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800431e:	4413      	add	r3, r2
 8004320:	b2db      	uxtb	r3, r3
 8004322:	3b30      	subs	r3, #48	; 0x30
 8004324:	b2da      	uxtb	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004332:	3b30      	subs	r3, #48	; 0x30
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	4413      	add	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004346:	4413      	add	r3, r2
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3b30      	subs	r3, #48	; 0x30
 800434c:	b2da      	uxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800435a:	3b30      	subs	r3, #48	; 0x30
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	0092      	lsls	r2, r2, #2
 8004362:	4413      	add	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800436e:	4413      	add	r3, r2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b30      	subs	r3, #48	; 0x30
 8004374:	b2da      	uxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                break;
 800437c:	e022      	b.n	80043c4 <prv_parse_term+0x224>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fe65 	bl	8004050 <prv_parse_float_number>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                break;
 8004390:	e018      	b.n	80043c4 <prv_parse_term+0x224>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8004398:	2957      	cmp	r1, #87	; 0x57
 800439a:	d004      	beq.n	80043a6 <prv_parse_term+0x206>
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 80043a2:	2977      	cmp	r1, #119	; 0x77
 80043a4:	d10d      	bne.n	80043c2 <prv_parse_term+0x222>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	e9d1 0116 	ldrd	r0, r1, [r1, #88]	; 0x58
 80043ac:	4602      	mov	r2, r0
 80043ae:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                }
                break;
 80043b8:	e003      	b.n	80043c2 <prv_parse_term+0x222>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80043ba:	bf00      	nop
 80043bc:	e002      	b.n	80043c4 <prv_parse_term+0x224>
                break;
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <prv_parse_term+0x224>
                break;
 80043c2:	bf00      	nop
    return 1;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	08005a00 	.word	0x08005a00
 80043d4:	08005a08 	.word	0x08005a08

080043d8 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80043e6:	2b2f      	cmp	r3, #47	; 0x2f
 80043e8:	d90d      	bls.n	8004406 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043f0:	2b39      	cmp	r3, #57	; 0x39
 80043f2:	d808      	bhi.n	8004406 <prv_check_crc+0x2e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043fa:	3b30      	subs	r3, #48	; 0x30
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004402:	b25a      	sxtb	r2, r3
 8004404:	e026      	b.n	8004454 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d90d      	bls.n	800442c <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004416:	2b7a      	cmp	r3, #122	; 0x7a
 8004418:	d808      	bhi.n	800442c <prv_check_crc+0x54>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004420:	3b57      	subs	r3, #87	; 0x57
 8004422:	b2db      	uxtb	r3, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004428:	b25a      	sxtb	r2, r3
 800442a:	e013      	b.n	8004454 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d90d      	bls.n	8004452 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800443c:	2b5a      	cmp	r3, #90	; 0x5a
 800443e:	d808      	bhi.n	8004452 <prv_check_crc+0x7a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004446:	3b37      	subs	r3, #55	; 0x37
 8004448:	b2db      	uxtb	r3, r3
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800444e:	b25a      	sxtb	r2, r3
 8004450:	e000      	b.n	8004454 <prv_check_crc+0x7c>
 8004452:	2200      	movs	r2, #0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800445a:	2b2f      	cmp	r3, #47	; 0x2f
 800445c:	d90c      	bls.n	8004478 <prv_check_crc+0xa0>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004464:	2b39      	cmp	r3, #57	; 0x39
 8004466:	d807      	bhi.n	8004478 <prv_check_crc+0xa0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800446e:	b25b      	sxtb	r3, r3
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b25b      	sxtb	r3, r3
 8004476:	e028      	b.n	80044ca <prv_check_crc+0xf2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800447e:	2b60      	cmp	r3, #96	; 0x60
 8004480:	d90e      	bls.n	80044a0 <prv_check_crc+0xc8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004488:	2b7a      	cmp	r3, #122	; 0x7a
 800448a:	d809      	bhi.n	80044a0 <prv_check_crc+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004492:	3b57      	subs	r3, #87	; 0x57
 8004494:	b2db      	uxtb	r3, r3
 8004496:	b25b      	sxtb	r3, r3
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b25b      	sxtb	r3, r3
 800449e:	e014      	b.n	80044ca <prv_check_crc+0xf2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d90e      	bls.n	80044c8 <prv_check_crc+0xf0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044b0:	2b5a      	cmp	r3, #90	; 0x5a
 80044b2:	d809      	bhi.n	80044c8 <prv_check_crc+0xf0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044ba:	3b37      	subs	r3, #55	; 0x37
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	e000      	b.n	80044ca <prv_check_crc+0xf2>
 80044c8:	2300      	movs	r3, #0
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80044ce:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	429a      	cmp	r2, r3
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d137      	bne.n	800456e <prv_copy_from_tmp_memory+0x82>
        gh->course = gh->p.data.rmc.course;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->is_valid = gh->p.data.rmc.is_valid;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	701a      	strb	r2, [r3, #0]
        gh->speed = gh->p.data.rmc.speed;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->variation = gh->p.data.rmc.variation;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->date = gh->p.data.rmc.date;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f883 2020 	strb.w	r2, [r3, #32]
        gh->month = gh->p.data.rmc.month;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->year = gh->p.data.rmc.year;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->hours = gh->p.data.rmc.hours;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	705a      	strb	r2, [r3, #1]
        gh->minutes = gh->p.data.rmc.minutes;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	709a      	strb	r2, [r3, #2]
        gh->seconds = gh->p.data.rmc.seconds;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	70da      	strb	r2, [r3, #3]
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8004582:	2260      	movs	r2, #96	; 0x60
 8004584:	2100      	movs	r1, #0
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8f0 	bl	800476c <memset>
    return 1;
 800458c:	2301      	movs	r3, #1
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80045a6:	e0ad      	b.n	8004704 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b24      	cmp	r3, #36	; 0x24
 80045ae:	d128      	bne.n	8004602 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3328      	adds	r3, #40	; 0x28
 80045b4:	2238      	movs	r2, #56	; 0x38
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f8d7 	bl	800476c <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045c4:	2b0b      	cmp	r3, #11
 80045c6:	f200 8097 	bhi.w	80046f8 <lwgps_process+0x162>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045d0:	4619      	mov	r1, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	440b      	add	r3, r1
 80045da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045f4:	461a      	mov	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004600:	e07a      	b.n	80046f8 <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b2c      	cmp	r3, #44	; 0x2c
 8004608:	d11d      	bne.n	8004646 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fdc8 	bl	80041a0 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	4053      	eors	r3, r2
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            TERM_NEXT(gh);                       /* Start with next term */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800463a:	3301      	adds	r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004644:	e058      	b.n	80046f8 <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b2a      	cmp	r3, #42	; 0x2a
 800464c:	d117      	bne.n	800467e <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fda6 	bl	80041a0 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            TERM_NEXT(gh);                       /* Start with next term */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004672:	3301      	adds	r3, #1
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800467c:	e03c      	b.n	80046f8 <lwgps_process+0x162>
        } else if (*d == '\r') {
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b0d      	cmp	r3, #13
 8004684:	d109      	bne.n	800469a <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fea6 	bl	80043d8 <prv_check_crc>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d032      	beq.n	80046f8 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff2a 	bl	80044ec <prv_copy_from_tmp_memory>
 8004698:	e02e      	b.n	80046f8 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d109      	bne.n	80046b8 <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	4053      	eors	r3, r2
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            TERM_ADD(gh, *d); /* Add character to term */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046be:	2b0b      	cmp	r3, #11
 80046c0:	d81a      	bhi.n	80046f8 <lwgps_process+0x162>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046c8:	4619      	mov	r1, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	440b      	add	r3, r1
 80046d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046dc:	3301      	adds	r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046ec:	461a      	mov	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3301      	adds	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3b01      	subs	r3, #1
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f af4e 	bne.w	80045a8 <lwgps_process+0x12>
        }
    }
    return 1;
 800470c:	2301      	movs	r3, #1
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	2600      	movs	r6, #0
 8004728:	4d0c      	ldr	r5, [pc, #48]	; (800475c <__libc_init_array+0x38>)
 800472a:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	f001 f840 	bl	80057b8 <_init>
 8004738:	2600      	movs	r6, #0
 800473a:	4d0a      	ldr	r5, [pc, #40]	; (8004764 <__libc_init_array+0x40>)
 800473c:	4c0a      	ldr	r4, [pc, #40]	; (8004768 <__libc_init_array+0x44>)
 800473e:	1b64      	subs	r4, r4, r5
 8004740:	10a4      	asrs	r4, r4, #2
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08005acc 	.word	0x08005acc
 8004760:	08005acc 	.word	0x08005acc
 8004764:	08005acc 	.word	0x08005acc
 8004768:	08005ad0 	.word	0x08005ad0

0800476c <memset>:
 800476c:	4603      	mov	r3, r0
 800476e:	4402      	add	r2, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <_free_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4605      	mov	r5, r0
 8004780:	2900      	cmp	r1, #0
 8004782:	d040      	beq.n	8004806 <_free_r+0x8a>
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f0c      	subs	r4, r1, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfb8      	it	lt
 800478e:	18e4      	addlt	r4, r4, r3
 8004790:	f000 fc5e 	bl	8005050 <__malloc_lock>
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <_free_r+0x8c>)
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	b933      	cbnz	r3, 80047a8 <_free_r+0x2c>
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6014      	str	r4, [r2, #0]
 800479e:	4628      	mov	r0, r5
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a4:	f000 bc5a 	b.w	800505c <__malloc_unlock>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d908      	bls.n	80047be <_free_r+0x42>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	1821      	adds	r1, r4, r0
 80047b0:	428b      	cmp	r3, r1
 80047b2:	bf01      	itttt	eq
 80047b4:	6819      	ldreq	r1, [r3, #0]
 80047b6:	685b      	ldreq	r3, [r3, #4]
 80047b8:	1809      	addeq	r1, r1, r0
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	e7ed      	b.n	800479a <_free_r+0x1e>
 80047be:	461a      	mov	r2, r3
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b10b      	cbz	r3, 80047c8 <_free_r+0x4c>
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d9fa      	bls.n	80047be <_free_r+0x42>
 80047c8:	6811      	ldr	r1, [r2, #0]
 80047ca:	1850      	adds	r0, r2, r1
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d10b      	bne.n	80047e8 <_free_r+0x6c>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	4401      	add	r1, r0
 80047d4:	1850      	adds	r0, r2, r1
 80047d6:	4283      	cmp	r3, r0
 80047d8:	6011      	str	r1, [r2, #0]
 80047da:	d1e0      	bne.n	800479e <_free_r+0x22>
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4401      	add	r1, r0
 80047e2:	6011      	str	r1, [r2, #0]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	e7da      	b.n	800479e <_free_r+0x22>
 80047e8:	d902      	bls.n	80047f0 <_free_r+0x74>
 80047ea:	230c      	movs	r3, #12
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	e7d6      	b.n	800479e <_free_r+0x22>
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	1821      	adds	r1, r4, r0
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf01      	itttt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6054      	str	r4, [r2, #4]
 8004804:	e7cb      	b.n	800479e <_free_r+0x22>
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	200009f8 	.word	0x200009f8

0800480c <sbrk_aligned>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4e0e      	ldr	r6, [pc, #56]	; (8004848 <sbrk_aligned+0x3c>)
 8004810:	460c      	mov	r4, r1
 8004812:	6831      	ldr	r1, [r6, #0]
 8004814:	4605      	mov	r5, r0
 8004816:	b911      	cbnz	r1, 800481e <sbrk_aligned+0x12>
 8004818:	f000 f91a 	bl	8004a50 <_sbrk_r>
 800481c:	6030      	str	r0, [r6, #0]
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	f000 f915 	bl	8004a50 <_sbrk_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	d00a      	beq.n	8004840 <sbrk_aligned+0x34>
 800482a:	1cc4      	adds	r4, r0, #3
 800482c:	f024 0403 	bic.w	r4, r4, #3
 8004830:	42a0      	cmp	r0, r4
 8004832:	d007      	beq.n	8004844 <sbrk_aligned+0x38>
 8004834:	1a21      	subs	r1, r4, r0
 8004836:	4628      	mov	r0, r5
 8004838:	f000 f90a 	bl	8004a50 <_sbrk_r>
 800483c:	3001      	adds	r0, #1
 800483e:	d101      	bne.n	8004844 <sbrk_aligned+0x38>
 8004840:	f04f 34ff 	mov.w	r4, #4294967295
 8004844:	4620      	mov	r0, r4
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	200009fc 	.word	0x200009fc

0800484c <_malloc_r>:
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	1ccd      	adds	r5, r1, #3
 8004852:	f025 0503 	bic.w	r5, r5, #3
 8004856:	3508      	adds	r5, #8
 8004858:	2d0c      	cmp	r5, #12
 800485a:	bf38      	it	cc
 800485c:	250c      	movcc	r5, #12
 800485e:	2d00      	cmp	r5, #0
 8004860:	4607      	mov	r7, r0
 8004862:	db01      	blt.n	8004868 <_malloc_r+0x1c>
 8004864:	42a9      	cmp	r1, r5
 8004866:	d905      	bls.n	8004874 <_malloc_r+0x28>
 8004868:	230c      	movs	r3, #12
 800486a:	2600      	movs	r6, #0
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4630      	mov	r0, r6
 8004870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004874:	4e2e      	ldr	r6, [pc, #184]	; (8004930 <_malloc_r+0xe4>)
 8004876:	f000 fbeb 	bl	8005050 <__malloc_lock>
 800487a:	6833      	ldr	r3, [r6, #0]
 800487c:	461c      	mov	r4, r3
 800487e:	bb34      	cbnz	r4, 80048ce <_malloc_r+0x82>
 8004880:	4629      	mov	r1, r5
 8004882:	4638      	mov	r0, r7
 8004884:	f7ff ffc2 	bl	800480c <sbrk_aligned>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	4604      	mov	r4, r0
 800488c:	d14d      	bne.n	800492a <_malloc_r+0xde>
 800488e:	6834      	ldr	r4, [r6, #0]
 8004890:	4626      	mov	r6, r4
 8004892:	2e00      	cmp	r6, #0
 8004894:	d140      	bne.n	8004918 <_malloc_r+0xcc>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	4631      	mov	r1, r6
 800489a:	4638      	mov	r0, r7
 800489c:	eb04 0803 	add.w	r8, r4, r3
 80048a0:	f000 f8d6 	bl	8004a50 <_sbrk_r>
 80048a4:	4580      	cmp	r8, r0
 80048a6:	d13a      	bne.n	800491e <_malloc_r+0xd2>
 80048a8:	6821      	ldr	r1, [r4, #0]
 80048aa:	3503      	adds	r5, #3
 80048ac:	1a6d      	subs	r5, r5, r1
 80048ae:	f025 0503 	bic.w	r5, r5, #3
 80048b2:	3508      	adds	r5, #8
 80048b4:	2d0c      	cmp	r5, #12
 80048b6:	bf38      	it	cc
 80048b8:	250c      	movcc	r5, #12
 80048ba:	4638      	mov	r0, r7
 80048bc:	4629      	mov	r1, r5
 80048be:	f7ff ffa5 	bl	800480c <sbrk_aligned>
 80048c2:	3001      	adds	r0, #1
 80048c4:	d02b      	beq.n	800491e <_malloc_r+0xd2>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	442b      	add	r3, r5
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	e00e      	b.n	80048ec <_malloc_r+0xa0>
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	1b52      	subs	r2, r2, r5
 80048d2:	d41e      	bmi.n	8004912 <_malloc_r+0xc6>
 80048d4:	2a0b      	cmp	r2, #11
 80048d6:	d916      	bls.n	8004906 <_malloc_r+0xba>
 80048d8:	1961      	adds	r1, r4, r5
 80048da:	42a3      	cmp	r3, r4
 80048dc:	6025      	str	r5, [r4, #0]
 80048de:	bf18      	it	ne
 80048e0:	6059      	strne	r1, [r3, #4]
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	bf08      	it	eq
 80048e6:	6031      	streq	r1, [r6, #0]
 80048e8:	5162      	str	r2, [r4, r5]
 80048ea:	604b      	str	r3, [r1, #4]
 80048ec:	4638      	mov	r0, r7
 80048ee:	f104 060b 	add.w	r6, r4, #11
 80048f2:	f000 fbb3 	bl	800505c <__malloc_unlock>
 80048f6:	f026 0607 	bic.w	r6, r6, #7
 80048fa:	1d23      	adds	r3, r4, #4
 80048fc:	1af2      	subs	r2, r6, r3
 80048fe:	d0b6      	beq.n	800486e <_malloc_r+0x22>
 8004900:	1b9b      	subs	r3, r3, r6
 8004902:	50a3      	str	r3, [r4, r2]
 8004904:	e7b3      	b.n	800486e <_malloc_r+0x22>
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	42a3      	cmp	r3, r4
 800490a:	bf0c      	ite	eq
 800490c:	6032      	streq	r2, [r6, #0]
 800490e:	605a      	strne	r2, [r3, #4]
 8004910:	e7ec      	b.n	80048ec <_malloc_r+0xa0>
 8004912:	4623      	mov	r3, r4
 8004914:	6864      	ldr	r4, [r4, #4]
 8004916:	e7b2      	b.n	800487e <_malloc_r+0x32>
 8004918:	4634      	mov	r4, r6
 800491a:	6876      	ldr	r6, [r6, #4]
 800491c:	e7b9      	b.n	8004892 <_malloc_r+0x46>
 800491e:	230c      	movs	r3, #12
 8004920:	4638      	mov	r0, r7
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	f000 fb9a 	bl	800505c <__malloc_unlock>
 8004928:	e7a1      	b.n	800486e <_malloc_r+0x22>
 800492a:	6025      	str	r5, [r4, #0]
 800492c:	e7de      	b.n	80048ec <_malloc_r+0xa0>
 800492e:	bf00      	nop
 8004930:	200009f8 	.word	0x200009f8

08004934 <iprintf>:
 8004934:	b40f      	push	{r0, r1, r2, r3}
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <iprintf+0x2c>)
 8004938:	b513      	push	{r0, r1, r4, lr}
 800493a:	681c      	ldr	r4, [r3, #0]
 800493c:	b124      	cbz	r4, 8004948 <iprintf+0x14>
 800493e:	69a3      	ldr	r3, [r4, #24]
 8004940:	b913      	cbnz	r3, 8004948 <iprintf+0x14>
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fa7e 	bl	8004e44 <__sinit>
 8004948:	ab05      	add	r3, sp, #20
 800494a:	4620      	mov	r0, r4
 800494c:	9a04      	ldr	r2, [sp, #16]
 800494e:	68a1      	ldr	r1, [r4, #8]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	f000 fbb1 	bl	80050b8 <_vfiprintf_r>
 8004956:	b002      	add	sp, #8
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495c:	b004      	add	sp, #16
 800495e:	4770      	bx	lr
 8004960:	2000000c 	.word	0x2000000c

08004964 <_puts_r>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	460e      	mov	r6, r1
 8004968:	4605      	mov	r5, r0
 800496a:	b118      	cbz	r0, 8004974 <_puts_r+0x10>
 800496c:	6983      	ldr	r3, [r0, #24]
 800496e:	b90b      	cbnz	r3, 8004974 <_puts_r+0x10>
 8004970:	f000 fa68 	bl	8004e44 <__sinit>
 8004974:	69ab      	ldr	r3, [r5, #24]
 8004976:	68ac      	ldr	r4, [r5, #8]
 8004978:	b913      	cbnz	r3, 8004980 <_puts_r+0x1c>
 800497a:	4628      	mov	r0, r5
 800497c:	f000 fa62 	bl	8004e44 <__sinit>
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <_puts_r+0xd0>)
 8004982:	429c      	cmp	r4, r3
 8004984:	d120      	bne.n	80049c8 <_puts_r+0x64>
 8004986:	686c      	ldr	r4, [r5, #4]
 8004988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498a:	07db      	lsls	r3, r3, #31
 800498c:	d405      	bmi.n	800499a <_puts_r+0x36>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	0598      	lsls	r0, r3, #22
 8004992:	d402      	bmi.n	800499a <_puts_r+0x36>
 8004994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004996:	f000 faf3 	bl	8004f80 <__retarget_lock_acquire_recursive>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	0719      	lsls	r1, r3, #28
 800499e:	d51d      	bpl.n	80049dc <_puts_r+0x78>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	b1db      	cbz	r3, 80049dc <_puts_r+0x78>
 80049a4:	3e01      	subs	r6, #1
 80049a6:	68a3      	ldr	r3, [r4, #8]
 80049a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60a3      	str	r3, [r4, #8]
 80049b0:	bb39      	cbnz	r1, 8004a02 <_puts_r+0x9e>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da38      	bge.n	8004a28 <_puts_r+0xc4>
 80049b6:	4622      	mov	r2, r4
 80049b8:	210a      	movs	r1, #10
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f86c 	bl	8004a98 <__swbuf_r>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d011      	beq.n	80049e8 <_puts_r+0x84>
 80049c4:	250a      	movs	r5, #10
 80049c6:	e011      	b.n	80049ec <_puts_r+0x88>
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <_puts_r+0xd4>)
 80049ca:	429c      	cmp	r4, r3
 80049cc:	d101      	bne.n	80049d2 <_puts_r+0x6e>
 80049ce:	68ac      	ldr	r4, [r5, #8]
 80049d0:	e7da      	b.n	8004988 <_puts_r+0x24>
 80049d2:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <_puts_r+0xd8>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	bf08      	it	eq
 80049d8:	68ec      	ldreq	r4, [r5, #12]
 80049da:	e7d5      	b.n	8004988 <_puts_r+0x24>
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 f8ac 	bl	8004b3c <__swsetup_r>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d0dd      	beq.n	80049a4 <_puts_r+0x40>
 80049e8:	f04f 35ff 	mov.w	r5, #4294967295
 80049ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ee:	07da      	lsls	r2, r3, #31
 80049f0:	d405      	bmi.n	80049fe <_puts_r+0x9a>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	059b      	lsls	r3, r3, #22
 80049f6:	d402      	bmi.n	80049fe <_puts_r+0x9a>
 80049f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fa:	f000 fac2 	bl	8004f82 <__retarget_lock_release_recursive>
 80049fe:	4628      	mov	r0, r5
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da04      	bge.n	8004a10 <_puts_r+0xac>
 8004a06:	69a2      	ldr	r2, [r4, #24]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	dc06      	bgt.n	8004a1a <_puts_r+0xb6>
 8004a0c:	290a      	cmp	r1, #10
 8004a0e:	d004      	beq.n	8004a1a <_puts_r+0xb6>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	6022      	str	r2, [r4, #0]
 8004a16:	7019      	strb	r1, [r3, #0]
 8004a18:	e7c5      	b.n	80049a6 <_puts_r+0x42>
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 f83b 	bl	8004a98 <__swbuf_r>
 8004a22:	3001      	adds	r0, #1
 8004a24:	d1bf      	bne.n	80049a6 <_puts_r+0x42>
 8004a26:	e7df      	b.n	80049e8 <_puts_r+0x84>
 8004a28:	250a      	movs	r5, #10
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	6022      	str	r2, [r4, #0]
 8004a30:	701d      	strb	r5, [r3, #0]
 8004a32:	e7db      	b.n	80049ec <_puts_r+0x88>
 8004a34:	08005a58 	.word	0x08005a58
 8004a38:	08005a78 	.word	0x08005a78
 8004a3c:	08005a38 	.word	0x08005a38

08004a40 <puts>:
 8004a40:	4b02      	ldr	r3, [pc, #8]	; (8004a4c <puts+0xc>)
 8004a42:	4601      	mov	r1, r0
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f7ff bf8d 	b.w	8004964 <_puts_r>
 8004a4a:	bf00      	nop
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <_sbrk_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	2300      	movs	r3, #0
 8004a54:	4d05      	ldr	r5, [pc, #20]	; (8004a6c <_sbrk_r+0x1c>)
 8004a56:	4604      	mov	r4, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	f7fc fb62 	bl	8001124 <_sbrk>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_sbrk_r+0x1a>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_sbrk_r+0x1a>
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	20000a04 	.word	0x20000a04

08004a70 <strncmp>:
 8004a70:	4603      	mov	r3, r0
 8004a72:	b510      	push	{r4, lr}
 8004a74:	b172      	cbz	r2, 8004a94 <strncmp+0x24>
 8004a76:	3901      	subs	r1, #1
 8004a78:	1884      	adds	r4, r0, r2
 8004a7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004a7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a82:	4290      	cmp	r0, r2
 8004a84:	d101      	bne.n	8004a8a <strncmp+0x1a>
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	d101      	bne.n	8004a8e <strncmp+0x1e>
 8004a8a:	1a80      	subs	r0, r0, r2
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d1f3      	bne.n	8004a7a <strncmp+0xa>
 8004a92:	e7fa      	b.n	8004a8a <strncmp+0x1a>
 8004a94:	4610      	mov	r0, r2
 8004a96:	e7f9      	b.n	8004a8c <strncmp+0x1c>

08004a98 <__swbuf_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	460e      	mov	r6, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	b118      	cbz	r0, 8004aaa <__swbuf_r+0x12>
 8004aa2:	6983      	ldr	r3, [r0, #24]
 8004aa4:	b90b      	cbnz	r3, 8004aaa <__swbuf_r+0x12>
 8004aa6:	f000 f9cd 	bl	8004e44 <__sinit>
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <__swbuf_r+0x98>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	d12b      	bne.n	8004b08 <__swbuf_r+0x70>
 8004ab0:	686c      	ldr	r4, [r5, #4]
 8004ab2:	69a3      	ldr	r3, [r4, #24]
 8004ab4:	60a3      	str	r3, [r4, #8]
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	071a      	lsls	r2, r3, #28
 8004aba:	d52f      	bpl.n	8004b1c <__swbuf_r+0x84>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	b36b      	cbz	r3, 8004b1c <__swbuf_r+0x84>
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	b2f6      	uxtb	r6, r6
 8004ac6:	1ac0      	subs	r0, r0, r3
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	4637      	mov	r7, r6
 8004acc:	4283      	cmp	r3, r0
 8004ace:	dc04      	bgt.n	8004ada <__swbuf_r+0x42>
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 f922 	bl	8004d1c <_fflush_r>
 8004ad8:	bb30      	cbnz	r0, 8004b28 <__swbuf_r+0x90>
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	3001      	adds	r0, #1
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60a3      	str	r3, [r4, #8]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701e      	strb	r6, [r3, #0]
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	4283      	cmp	r3, r0
 8004aee:	d004      	beq.n	8004afa <__swbuf_r+0x62>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	07db      	lsls	r3, r3, #31
 8004af4:	d506      	bpl.n	8004b04 <__swbuf_r+0x6c>
 8004af6:	2e0a      	cmp	r6, #10
 8004af8:	d104      	bne.n	8004b04 <__swbuf_r+0x6c>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f90d 	bl	8004d1c <_fflush_r>
 8004b02:	b988      	cbnz	r0, 8004b28 <__swbuf_r+0x90>
 8004b04:	4638      	mov	r0, r7
 8004b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <__swbuf_r+0x9c>)
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d101      	bne.n	8004b12 <__swbuf_r+0x7a>
 8004b0e:	68ac      	ldr	r4, [r5, #8]
 8004b10:	e7cf      	b.n	8004ab2 <__swbuf_r+0x1a>
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <__swbuf_r+0xa0>)
 8004b14:	429c      	cmp	r4, r3
 8004b16:	bf08      	it	eq
 8004b18:	68ec      	ldreq	r4, [r5, #12]
 8004b1a:	e7ca      	b.n	8004ab2 <__swbuf_r+0x1a>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f80c 	bl	8004b3c <__swsetup_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d0cb      	beq.n	8004ac0 <__swbuf_r+0x28>
 8004b28:	f04f 37ff 	mov.w	r7, #4294967295
 8004b2c:	e7ea      	b.n	8004b04 <__swbuf_r+0x6c>
 8004b2e:	bf00      	nop
 8004b30:	08005a58 	.word	0x08005a58
 8004b34:	08005a78 	.word	0x08005a78
 8004b38:	08005a38 	.word	0x08005a38

08004b3c <__swsetup_r>:
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <__swsetup_r+0xcc>)
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	4606      	mov	r6, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	b125      	cbz	r5, 8004b52 <__swsetup_r+0x16>
 8004b48:	69ab      	ldr	r3, [r5, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__swsetup_r+0x16>
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 f979 	bl	8004e44 <__sinit>
 8004b52:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <__swsetup_r+0xd0>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d10f      	bne.n	8004b78 <__swsetup_r+0x3c>
 8004b58:	686c      	ldr	r4, [r5, #4]
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b60:	0719      	lsls	r1, r3, #28
 8004b62:	d42c      	bmi.n	8004bbe <__swsetup_r+0x82>
 8004b64:	06dd      	lsls	r5, r3, #27
 8004b66:	d411      	bmi.n	8004b8c <__swsetup_r+0x50>
 8004b68:	2309      	movs	r3, #9
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	e03e      	b.n	8004bf6 <__swsetup_r+0xba>
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <__swsetup_r+0xd4>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <__swsetup_r+0x46>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7eb      	b.n	8004b5a <__swsetup_r+0x1e>
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <__swsetup_r+0xd8>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7e6      	b.n	8004b5a <__swsetup_r+0x1e>
 8004b8c:	0758      	lsls	r0, r3, #29
 8004b8e:	d512      	bpl.n	8004bb6 <__swsetup_r+0x7a>
 8004b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b92:	b141      	cbz	r1, 8004ba6 <__swsetup_r+0x6a>
 8004b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d002      	beq.n	8004ba2 <__swsetup_r+0x66>
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f7ff fded 	bl	800477c <_free_r>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	6923      	ldr	r3, [r4, #16]
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f043 0308 	orr.w	r3, r3, #8
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	b94b      	cbnz	r3, 8004bd6 <__swsetup_r+0x9a>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bcc:	d003      	beq.n	8004bd6 <__swsetup_r+0x9a>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f9fd 	bl	8004fd0 <__smakebuf_r>
 8004bd6:	89a0      	ldrh	r0, [r4, #12]
 8004bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bdc:	f010 0301 	ands.w	r3, r0, #1
 8004be0:	d00a      	beq.n	8004bf8 <__swsetup_r+0xbc>
 8004be2:	2300      	movs	r3, #0
 8004be4:	60a3      	str	r3, [r4, #8]
 8004be6:	6963      	ldr	r3, [r4, #20]
 8004be8:	425b      	negs	r3, r3
 8004bea:	61a3      	str	r3, [r4, #24]
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	b943      	cbnz	r3, 8004c02 <__swsetup_r+0xc6>
 8004bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bf4:	d1ba      	bne.n	8004b6c <__swsetup_r+0x30>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	0781      	lsls	r1, r0, #30
 8004bfa:	bf58      	it	pl
 8004bfc:	6963      	ldrpl	r3, [r4, #20]
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	e7f4      	b.n	8004bec <__swsetup_r+0xb0>
 8004c02:	2000      	movs	r0, #0
 8004c04:	e7f7      	b.n	8004bf6 <__swsetup_r+0xba>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	08005a58 	.word	0x08005a58
 8004c10:	08005a78 	.word	0x08005a78
 8004c14:	08005a38 	.word	0x08005a38

08004c18 <__sflush_r>:
 8004c18:	898a      	ldrh	r2, [r1, #12]
 8004c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	0710      	lsls	r0, r2, #28
 8004c20:	460c      	mov	r4, r1
 8004c22:	d457      	bmi.n	8004cd4 <__sflush_r+0xbc>
 8004c24:	684b      	ldr	r3, [r1, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dc04      	bgt.n	8004c34 <__sflush_r+0x1c>
 8004c2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dc01      	bgt.n	8004c34 <__sflush_r+0x1c>
 8004c30:	2000      	movs	r0, #0
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d0fa      	beq.n	8004c30 <__sflush_r+0x18>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c40:	682f      	ldr	r7, [r5, #0]
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	d032      	beq.n	8004cac <__sflush_r+0x94>
 8004c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	075a      	lsls	r2, r3, #29
 8004c4c:	d505      	bpl.n	8004c5a <__sflush_r+0x42>
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	1ac0      	subs	r0, r0, r3
 8004c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c54:	b10b      	cbz	r3, 8004c5a <__sflush_r+0x42>
 8004c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c58:	1ac0      	subs	r0, r0, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c60:	4628      	mov	r0, r5
 8004c62:	6a21      	ldr	r1, [r4, #32]
 8004c64:	47b0      	blx	r6
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	d106      	bne.n	8004c7a <__sflush_r+0x62>
 8004c6c:	6829      	ldr	r1, [r5, #0]
 8004c6e:	291d      	cmp	r1, #29
 8004c70:	d82c      	bhi.n	8004ccc <__sflush_r+0xb4>
 8004c72:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <__sflush_r+0x100>)
 8004c74:	40ca      	lsrs	r2, r1
 8004c76:	07d6      	lsls	r6, r2, #31
 8004c78:	d528      	bpl.n	8004ccc <__sflush_r+0xb4>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	6062      	str	r2, [r4, #4]
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	04d9      	lsls	r1, r3, #19
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	d504      	bpl.n	8004c90 <__sflush_r+0x78>
 8004c86:	1c42      	adds	r2, r0, #1
 8004c88:	d101      	bne.n	8004c8e <__sflush_r+0x76>
 8004c8a:	682b      	ldr	r3, [r5, #0]
 8004c8c:	b903      	cbnz	r3, 8004c90 <__sflush_r+0x78>
 8004c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c92:	602f      	str	r7, [r5, #0]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d0cb      	beq.n	8004c30 <__sflush_r+0x18>
 8004c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <__sflush_r+0x8e>
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7ff fd6b 	bl	800477c <_free_r>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8004caa:	e7c2      	b.n	8004c32 <__sflush_r+0x1a>
 8004cac:	6a21      	ldr	r1, [r4, #32]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b0      	blx	r6
 8004cb4:	1c41      	adds	r1, r0, #1
 8004cb6:	d1c7      	bne.n	8004c48 <__sflush_r+0x30>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0c4      	beq.n	8004c48 <__sflush_r+0x30>
 8004cbe:	2b1d      	cmp	r3, #29
 8004cc0:	d001      	beq.n	8004cc6 <__sflush_r+0xae>
 8004cc2:	2b16      	cmp	r3, #22
 8004cc4:	d101      	bne.n	8004cca <__sflush_r+0xb2>
 8004cc6:	602f      	str	r7, [r5, #0]
 8004cc8:	e7b2      	b.n	8004c30 <__sflush_r+0x18>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	e7ae      	b.n	8004c32 <__sflush_r+0x1a>
 8004cd4:	690f      	ldr	r7, [r1, #16]
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d0aa      	beq.n	8004c30 <__sflush_r+0x18>
 8004cda:	0793      	lsls	r3, r2, #30
 8004cdc:	bf18      	it	ne
 8004cde:	2300      	movne	r3, #0
 8004ce0:	680e      	ldr	r6, [r1, #0]
 8004ce2:	bf08      	it	eq
 8004ce4:	694b      	ldreq	r3, [r1, #20]
 8004ce6:	1bf6      	subs	r6, r6, r7
 8004ce8:	600f      	str	r7, [r1, #0]
 8004cea:	608b      	str	r3, [r1, #8]
 8004cec:	2e00      	cmp	r6, #0
 8004cee:	dd9f      	ble.n	8004c30 <__sflush_r+0x18>
 8004cf0:	4633      	mov	r3, r6
 8004cf2:	463a      	mov	r2, r7
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	6a21      	ldr	r1, [r4, #32]
 8004cf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004cfc:	47e0      	blx	ip
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	dc06      	bgt.n	8004d10 <__sflush_r+0xf8>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0c:	81a3      	strh	r3, [r4, #12]
 8004d0e:	e790      	b.n	8004c32 <__sflush_r+0x1a>
 8004d10:	4407      	add	r7, r0
 8004d12:	1a36      	subs	r6, r6, r0
 8004d14:	e7ea      	b.n	8004cec <__sflush_r+0xd4>
 8004d16:	bf00      	nop
 8004d18:	20400001 	.word	0x20400001

08004d1c <_fflush_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	690b      	ldr	r3, [r1, #16]
 8004d20:	4605      	mov	r5, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	b913      	cbnz	r3, 8004d2c <_fflush_r+0x10>
 8004d26:	2500      	movs	r5, #0
 8004d28:	4628      	mov	r0, r5
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	b118      	cbz	r0, 8004d36 <_fflush_r+0x1a>
 8004d2e:	6983      	ldr	r3, [r0, #24]
 8004d30:	b90b      	cbnz	r3, 8004d36 <_fflush_r+0x1a>
 8004d32:	f000 f887 	bl	8004e44 <__sinit>
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <_fflush_r+0x6c>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	d11b      	bne.n	8004d74 <_fflush_r+0x58>
 8004d3c:	686c      	ldr	r4, [r5, #4]
 8004d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0ef      	beq.n	8004d26 <_fflush_r+0xa>
 8004d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d48:	07d0      	lsls	r0, r2, #31
 8004d4a:	d404      	bmi.n	8004d56 <_fflush_r+0x3a>
 8004d4c:	0599      	lsls	r1, r3, #22
 8004d4e:	d402      	bmi.n	8004d56 <_fflush_r+0x3a>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f000 f915 	bl	8004f80 <__retarget_lock_acquire_recursive>
 8004d56:	4628      	mov	r0, r5
 8004d58:	4621      	mov	r1, r4
 8004d5a:	f7ff ff5d 	bl	8004c18 <__sflush_r>
 8004d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d60:	4605      	mov	r5, r0
 8004d62:	07da      	lsls	r2, r3, #31
 8004d64:	d4e0      	bmi.n	8004d28 <_fflush_r+0xc>
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	059b      	lsls	r3, r3, #22
 8004d6a:	d4dd      	bmi.n	8004d28 <_fflush_r+0xc>
 8004d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6e:	f000 f908 	bl	8004f82 <__retarget_lock_release_recursive>
 8004d72:	e7d9      	b.n	8004d28 <_fflush_r+0xc>
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <_fflush_r+0x70>)
 8004d76:	429c      	cmp	r4, r3
 8004d78:	d101      	bne.n	8004d7e <_fflush_r+0x62>
 8004d7a:	68ac      	ldr	r4, [r5, #8]
 8004d7c:	e7df      	b.n	8004d3e <_fflush_r+0x22>
 8004d7e:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <_fflush_r+0x74>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	bf08      	it	eq
 8004d84:	68ec      	ldreq	r4, [r5, #12]
 8004d86:	e7da      	b.n	8004d3e <_fflush_r+0x22>
 8004d88:	08005a58 	.word	0x08005a58
 8004d8c:	08005a78 	.word	0x08005a78
 8004d90:	08005a38 	.word	0x08005a38

08004d94 <std>:
 8004d94:	2300      	movs	r3, #0
 8004d96:	b510      	push	{r4, lr}
 8004d98:	4604      	mov	r4, r0
 8004d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004da2:	6083      	str	r3, [r0, #8]
 8004da4:	8181      	strh	r1, [r0, #12]
 8004da6:	6643      	str	r3, [r0, #100]	; 0x64
 8004da8:	81c2      	strh	r2, [r0, #14]
 8004daa:	6183      	str	r3, [r0, #24]
 8004dac:	4619      	mov	r1, r3
 8004dae:	2208      	movs	r2, #8
 8004db0:	305c      	adds	r0, #92	; 0x5c
 8004db2:	f7ff fcdb 	bl	800476c <memset>
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <std+0x38>)
 8004db8:	6224      	str	r4, [r4, #32]
 8004dba:	6263      	str	r3, [r4, #36]	; 0x24
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <std+0x3c>)
 8004dbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <std+0x40>)
 8004dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <std+0x44>)
 8004dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	bf00      	nop
 8004dcc:	08005645 	.word	0x08005645
 8004dd0:	08005667 	.word	0x08005667
 8004dd4:	0800569f 	.word	0x0800569f
 8004dd8:	080056c3 	.word	0x080056c3

08004ddc <_cleanup_r>:
 8004ddc:	4901      	ldr	r1, [pc, #4]	; (8004de4 <_cleanup_r+0x8>)
 8004dde:	f000 b8af 	b.w	8004f40 <_fwalk_reent>
 8004de2:	bf00      	nop
 8004de4:	08004d1d 	.word	0x08004d1d

08004de8 <__sfmoreglue>:
 8004de8:	2268      	movs	r2, #104	; 0x68
 8004dea:	b570      	push	{r4, r5, r6, lr}
 8004dec:	1e4d      	subs	r5, r1, #1
 8004dee:	4355      	muls	r5, r2
 8004df0:	460e      	mov	r6, r1
 8004df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004df6:	f7ff fd29 	bl	800484c <_malloc_r>
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	b140      	cbz	r0, 8004e10 <__sfmoreglue+0x28>
 8004dfe:	2100      	movs	r1, #0
 8004e00:	e9c0 1600 	strd	r1, r6, [r0]
 8004e04:	300c      	adds	r0, #12
 8004e06:	60a0      	str	r0, [r4, #8]
 8004e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e0c:	f7ff fcae 	bl	800476c <memset>
 8004e10:	4620      	mov	r0, r4
 8004e12:	bd70      	pop	{r4, r5, r6, pc}

08004e14 <__sfp_lock_acquire>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__sfp_lock_acquire+0x8>)
 8004e16:	f000 b8b3 	b.w	8004f80 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000a01 	.word	0x20000a01

08004e20 <__sfp_lock_release>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__sfp_lock_release+0x8>)
 8004e22:	f000 b8ae 	b.w	8004f82 <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000a01 	.word	0x20000a01

08004e2c <__sinit_lock_acquire>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__sinit_lock_acquire+0x8>)
 8004e2e:	f000 b8a7 	b.w	8004f80 <__retarget_lock_acquire_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000a02 	.word	0x20000a02

08004e38 <__sinit_lock_release>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sinit_lock_release+0x8>)
 8004e3a:	f000 b8a2 	b.w	8004f82 <__retarget_lock_release_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20000a02 	.word	0x20000a02

08004e44 <__sinit>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4604      	mov	r4, r0
 8004e48:	f7ff fff0 	bl	8004e2c <__sinit_lock_acquire>
 8004e4c:	69a3      	ldr	r3, [r4, #24]
 8004e4e:	b11b      	cbz	r3, 8004e58 <__sinit+0x14>
 8004e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e54:	f7ff bff0 	b.w	8004e38 <__sinit_lock_release>
 8004e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <__sinit+0x68>)
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <__sinit+0x6c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	bf08      	it	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	bf08      	it	eq
 8004e70:	61a3      	streq	r3, [r4, #24]
 8004e72:	f000 f81f 	bl	8004eb4 <__sfp>
 8004e76:	6060      	str	r0, [r4, #4]
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 f81b 	bl	8004eb4 <__sfp>
 8004e7e:	60a0      	str	r0, [r4, #8]
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 f817 	bl	8004eb4 <__sfp>
 8004e86:	2200      	movs	r2, #0
 8004e88:	2104      	movs	r1, #4
 8004e8a:	60e0      	str	r0, [r4, #12]
 8004e8c:	6860      	ldr	r0, [r4, #4]
 8004e8e:	f7ff ff81 	bl	8004d94 <std>
 8004e92:	2201      	movs	r2, #1
 8004e94:	2109      	movs	r1, #9
 8004e96:	68a0      	ldr	r0, [r4, #8]
 8004e98:	f7ff ff7c 	bl	8004d94 <std>
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	2112      	movs	r1, #18
 8004ea0:	68e0      	ldr	r0, [r4, #12]
 8004ea2:	f7ff ff77 	bl	8004d94 <std>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61a3      	str	r3, [r4, #24]
 8004eaa:	e7d1      	b.n	8004e50 <__sinit+0xc>
 8004eac:	08005a34 	.word	0x08005a34
 8004eb0:	08004ddd 	.word	0x08004ddd

08004eb4 <__sfp>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	f7ff ffac 	bl	8004e14 <__sfp_lock_acquire>
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <__sfp+0x84>)
 8004ebe:	681e      	ldr	r6, [r3, #0]
 8004ec0:	69b3      	ldr	r3, [r6, #24]
 8004ec2:	b913      	cbnz	r3, 8004eca <__sfp+0x16>
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f7ff ffbd 	bl	8004e44 <__sinit>
 8004eca:	3648      	adds	r6, #72	; 0x48
 8004ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	d503      	bpl.n	8004edc <__sfp+0x28>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	b30b      	cbz	r3, 8004f1c <__sfp+0x68>
 8004ed8:	6836      	ldr	r6, [r6, #0]
 8004eda:	e7f7      	b.n	8004ecc <__sfp+0x18>
 8004edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ee0:	b9d5      	cbnz	r5, 8004f18 <__sfp+0x64>
 8004ee2:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <__sfp+0x88>)
 8004ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ee8:	60e3      	str	r3, [r4, #12]
 8004eea:	6665      	str	r5, [r4, #100]	; 0x64
 8004eec:	f000 f847 	bl	8004f7e <__retarget_lock_init_recursive>
 8004ef0:	f7ff ff96 	bl	8004e20 <__sfp_lock_release>
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f00:	6025      	str	r5, [r4, #0]
 8004f02:	61a5      	str	r5, [r4, #24]
 8004f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f08:	f7ff fc30 	bl	800476c <memset>
 8004f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f14:	4620      	mov	r0, r4
 8004f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f18:	3468      	adds	r4, #104	; 0x68
 8004f1a:	e7d9      	b.n	8004ed0 <__sfp+0x1c>
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f7ff ff62 	bl	8004de8 <__sfmoreglue>
 8004f24:	4604      	mov	r4, r0
 8004f26:	6030      	str	r0, [r6, #0]
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d1d5      	bne.n	8004ed8 <__sfp+0x24>
 8004f2c:	f7ff ff78 	bl	8004e20 <__sfp_lock_release>
 8004f30:	230c      	movs	r3, #12
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	e7ee      	b.n	8004f14 <__sfp+0x60>
 8004f36:	bf00      	nop
 8004f38:	08005a34 	.word	0x08005a34
 8004f3c:	ffff0001 	.word	0xffff0001

08004f40 <_fwalk_reent>:
 8004f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f44:	4606      	mov	r6, r0
 8004f46:	4688      	mov	r8, r1
 8004f48:	2700      	movs	r7, #0
 8004f4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f52:	f1b9 0901 	subs.w	r9, r9, #1
 8004f56:	d505      	bpl.n	8004f64 <_fwalk_reent+0x24>
 8004f58:	6824      	ldr	r4, [r4, #0]
 8004f5a:	2c00      	cmp	r4, #0
 8004f5c:	d1f7      	bne.n	8004f4e <_fwalk_reent+0xe>
 8004f5e:	4638      	mov	r0, r7
 8004f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f64:	89ab      	ldrh	r3, [r5, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d907      	bls.n	8004f7a <_fwalk_reent+0x3a>
 8004f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	d003      	beq.n	8004f7a <_fwalk_reent+0x3a>
 8004f72:	4629      	mov	r1, r5
 8004f74:	4630      	mov	r0, r6
 8004f76:	47c0      	blx	r8
 8004f78:	4307      	orrs	r7, r0
 8004f7a:	3568      	adds	r5, #104	; 0x68
 8004f7c:	e7e9      	b.n	8004f52 <_fwalk_reent+0x12>

08004f7e <__retarget_lock_init_recursive>:
 8004f7e:	4770      	bx	lr

08004f80 <__retarget_lock_acquire_recursive>:
 8004f80:	4770      	bx	lr

08004f82 <__retarget_lock_release_recursive>:
 8004f82:	4770      	bx	lr

08004f84 <__swhatbuf_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460e      	mov	r6, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	461d      	mov	r5, r3
 8004f92:	b096      	sub	sp, #88	; 0x58
 8004f94:	da08      	bge.n	8004fa8 <__swhatbuf_r+0x24>
 8004f96:	2200      	movs	r2, #0
 8004f98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	061a      	lsls	r2, r3, #24
 8004fa0:	d410      	bmi.n	8004fc4 <__swhatbuf_r+0x40>
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	e00e      	b.n	8004fc6 <__swhatbuf_r+0x42>
 8004fa8:	466a      	mov	r2, sp
 8004faa:	f000 fbb1 	bl	8005710 <_fstat_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	dbf1      	blt.n	8004f96 <__swhatbuf_r+0x12>
 8004fb2:	9a01      	ldr	r2, [sp, #4]
 8004fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fbc:	425a      	negs	r2, r3
 8004fbe:	415a      	adcs	r2, r3
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	e7ee      	b.n	8004fa2 <__swhatbuf_r+0x1e>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	b016      	add	sp, #88	; 0x58
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd0 <__smakebuf_r>:
 8004fd0:	898b      	ldrh	r3, [r1, #12]
 8004fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd4:	079d      	lsls	r5, r3, #30
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	d507      	bpl.n	8004fec <__smakebuf_r+0x1c>
 8004fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	6163      	str	r3, [r4, #20]
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	466a      	mov	r2, sp
 8004fee:	ab01      	add	r3, sp, #4
 8004ff0:	f7ff ffc8 	bl	8004f84 <__swhatbuf_r>
 8004ff4:	9900      	ldr	r1, [sp, #0]
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fc27 	bl	800484c <_malloc_r>
 8004ffe:	b948      	cbnz	r0, 8005014 <__smakebuf_r+0x44>
 8005000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d4ef      	bmi.n	8004fe8 <__smakebuf_r+0x18>
 8005008:	f023 0303 	bic.w	r3, r3, #3
 800500c:	f043 0302 	orr.w	r3, r3, #2
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	e7e3      	b.n	8004fdc <__smakebuf_r+0xc>
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <__smakebuf_r+0x7c>)
 8005016:	62b3      	str	r3, [r6, #40]	; 0x28
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	6020      	str	r0, [r4, #0]
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	9b00      	ldr	r3, [sp, #0]
 8005024:	6120      	str	r0, [r4, #16]
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	b15b      	cbz	r3, 8005044 <__smakebuf_r+0x74>
 800502c:	4630      	mov	r0, r6
 800502e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005032:	f000 fb7f 	bl	8005734 <_isatty_r>
 8005036:	b128      	cbz	r0, 8005044 <__smakebuf_r+0x74>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	89a0      	ldrh	r0, [r4, #12]
 8005046:	4305      	orrs	r5, r0
 8005048:	81a5      	strh	r5, [r4, #12]
 800504a:	e7cd      	b.n	8004fe8 <__smakebuf_r+0x18>
 800504c:	08004ddd 	.word	0x08004ddd

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff bf95 	b.w	8004f80 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20000a00 	.word	0x20000a00

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff bf90 	b.w	8004f82 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20000a00 	.word	0x20000a00

08005068 <__sfputc_r>:
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	b410      	push	{r4}
 800506c:	3b01      	subs	r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	6093      	str	r3, [r2, #8]
 8005072:	da07      	bge.n	8005084 <__sfputc_r+0x1c>
 8005074:	6994      	ldr	r4, [r2, #24]
 8005076:	42a3      	cmp	r3, r4
 8005078:	db01      	blt.n	800507e <__sfputc_r+0x16>
 800507a:	290a      	cmp	r1, #10
 800507c:	d102      	bne.n	8005084 <__sfputc_r+0x1c>
 800507e:	bc10      	pop	{r4}
 8005080:	f7ff bd0a 	b.w	8004a98 <__swbuf_r>
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	1c58      	adds	r0, r3, #1
 8005088:	6010      	str	r0, [r2, #0]
 800508a:	7019      	strb	r1, [r3, #0]
 800508c:	4608      	mov	r0, r1
 800508e:	bc10      	pop	{r4}
 8005090:	4770      	bx	lr

08005092 <__sfputs_r>:
 8005092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	4614      	mov	r4, r2
 800509a:	18d5      	adds	r5, r2, r3
 800509c:	42ac      	cmp	r4, r5
 800509e:	d101      	bne.n	80050a4 <__sfputs_r+0x12>
 80050a0:	2000      	movs	r0, #0
 80050a2:	e007      	b.n	80050b4 <__sfputs_r+0x22>
 80050a4:	463a      	mov	r2, r7
 80050a6:	4630      	mov	r0, r6
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	f7ff ffdc 	bl	8005068 <__sfputc_r>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d1f3      	bne.n	800509c <__sfputs_r+0xa>
 80050b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b8 <_vfiprintf_r>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	460d      	mov	r5, r1
 80050be:	4614      	mov	r4, r2
 80050c0:	4698      	mov	r8, r3
 80050c2:	4606      	mov	r6, r0
 80050c4:	b09d      	sub	sp, #116	; 0x74
 80050c6:	b118      	cbz	r0, 80050d0 <_vfiprintf_r+0x18>
 80050c8:	6983      	ldr	r3, [r0, #24]
 80050ca:	b90b      	cbnz	r3, 80050d0 <_vfiprintf_r+0x18>
 80050cc:	f7ff feba 	bl	8004e44 <__sinit>
 80050d0:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <_vfiprintf_r+0x240>)
 80050d2:	429d      	cmp	r5, r3
 80050d4:	d11b      	bne.n	800510e <_vfiprintf_r+0x56>
 80050d6:	6875      	ldr	r5, [r6, #4]
 80050d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050da:	07d9      	lsls	r1, r3, #31
 80050dc:	d405      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	059a      	lsls	r2, r3, #22
 80050e2:	d402      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e6:	f7ff ff4b 	bl	8004f80 <__retarget_lock_acquire_recursive>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	d501      	bpl.n	80050f4 <_vfiprintf_r+0x3c>
 80050f0:	692b      	ldr	r3, [r5, #16]
 80050f2:	b9eb      	cbnz	r3, 8005130 <_vfiprintf_r+0x78>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff fd20 	bl	8004b3c <__swsetup_r>
 80050fc:	b1c0      	cbz	r0, 8005130 <_vfiprintf_r+0x78>
 80050fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005100:	07dc      	lsls	r4, r3, #31
 8005102:	d50e      	bpl.n	8005122 <_vfiprintf_r+0x6a>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b01d      	add	sp, #116	; 0x74
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <_vfiprintf_r+0x244>)
 8005110:	429d      	cmp	r5, r3
 8005112:	d101      	bne.n	8005118 <_vfiprintf_r+0x60>
 8005114:	68b5      	ldr	r5, [r6, #8]
 8005116:	e7df      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <_vfiprintf_r+0x248>)
 800511a:	429d      	cmp	r5, r3
 800511c:	bf08      	it	eq
 800511e:	68f5      	ldreq	r5, [r6, #12]
 8005120:	e7da      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005122:	89ab      	ldrh	r3, [r5, #12]
 8005124:	0598      	lsls	r0, r3, #22
 8005126:	d4ed      	bmi.n	8005104 <_vfiprintf_r+0x4c>
 8005128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512a:	f7ff ff2a 	bl	8004f82 <__retarget_lock_release_recursive>
 800512e:	e7e9      	b.n	8005104 <_vfiprintf_r+0x4c>
 8005130:	2300      	movs	r3, #0
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
 8005134:	2320      	movs	r3, #32
 8005136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800513a:	2330      	movs	r3, #48	; 0x30
 800513c:	f04f 0901 	mov.w	r9, #1
 8005140:	f8cd 800c 	str.w	r8, [sp, #12]
 8005144:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005304 <_vfiprintf_r+0x24c>
 8005148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800514c:	4623      	mov	r3, r4
 800514e:	469a      	mov	sl, r3
 8005150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005154:	b10a      	cbz	r2, 800515a <_vfiprintf_r+0xa2>
 8005156:	2a25      	cmp	r2, #37	; 0x25
 8005158:	d1f9      	bne.n	800514e <_vfiprintf_r+0x96>
 800515a:	ebba 0b04 	subs.w	fp, sl, r4
 800515e:	d00b      	beq.n	8005178 <_vfiprintf_r+0xc0>
 8005160:	465b      	mov	r3, fp
 8005162:	4622      	mov	r2, r4
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff ff93 	bl	8005092 <__sfputs_r>
 800516c:	3001      	adds	r0, #1
 800516e:	f000 80aa 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005174:	445a      	add	r2, fp
 8005176:	9209      	str	r2, [sp, #36]	; 0x24
 8005178:	f89a 3000 	ldrb.w	r3, [sl]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a2 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005182:	2300      	movs	r3, #0
 8005184:	f04f 32ff 	mov.w	r2, #4294967295
 8005188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800518c:	f10a 0a01 	add.w	sl, sl, #1
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	9307      	str	r3, [sp, #28]
 8005194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005198:	931a      	str	r3, [sp, #104]	; 0x68
 800519a:	4654      	mov	r4, sl
 800519c:	2205      	movs	r2, #5
 800519e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a2:	4858      	ldr	r0, [pc, #352]	; (8005304 <_vfiprintf_r+0x24c>)
 80051a4:	f000 fae8 	bl	8005778 <memchr>
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	b9d8      	cbnz	r0, 80051e4 <_vfiprintf_r+0x12c>
 80051ac:	06d1      	lsls	r1, r2, #27
 80051ae:	bf44      	itt	mi
 80051b0:	2320      	movmi	r3, #32
 80051b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b6:	0713      	lsls	r3, r2, #28
 80051b8:	bf44      	itt	mi
 80051ba:	232b      	movmi	r3, #43	; 0x2b
 80051bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c0:	f89a 3000 	ldrb.w	r3, [sl]
 80051c4:	2b2a      	cmp	r3, #42	; 0x2a
 80051c6:	d015      	beq.n	80051f4 <_vfiprintf_r+0x13c>
 80051c8:	4654      	mov	r4, sl
 80051ca:	2000      	movs	r0, #0
 80051cc:	f04f 0c0a 	mov.w	ip, #10
 80051d0:	9a07      	ldr	r2, [sp, #28]
 80051d2:	4621      	mov	r1, r4
 80051d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d8:	3b30      	subs	r3, #48	; 0x30
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d94e      	bls.n	800527c <_vfiprintf_r+0x1c4>
 80051de:	b1b0      	cbz	r0, 800520e <_vfiprintf_r+0x156>
 80051e0:	9207      	str	r2, [sp, #28]
 80051e2:	e014      	b.n	800520e <_vfiprintf_r+0x156>
 80051e4:	eba0 0308 	sub.w	r3, r0, r8
 80051e8:	fa09 f303 	lsl.w	r3, r9, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	46a2      	mov	sl, r4
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	e7d2      	b.n	800519a <_vfiprintf_r+0xe2>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	1d19      	adds	r1, r3, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	9103      	str	r1, [sp, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bfbb      	ittet	lt
 8005200:	425b      	neglt	r3, r3
 8005202:	f042 0202 	orrlt.w	r2, r2, #2
 8005206:	9307      	strge	r3, [sp, #28]
 8005208:	9307      	strlt	r3, [sp, #28]
 800520a:	bfb8      	it	lt
 800520c:	9204      	strlt	r2, [sp, #16]
 800520e:	7823      	ldrb	r3, [r4, #0]
 8005210:	2b2e      	cmp	r3, #46	; 0x2e
 8005212:	d10c      	bne.n	800522e <_vfiprintf_r+0x176>
 8005214:	7863      	ldrb	r3, [r4, #1]
 8005216:	2b2a      	cmp	r3, #42	; 0x2a
 8005218:	d135      	bne.n	8005286 <_vfiprintf_r+0x1ce>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	3402      	adds	r4, #2
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	9203      	str	r2, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	bfb8      	it	lt
 8005228:	f04f 33ff 	movlt.w	r3, #4294967295
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005308 <_vfiprintf_r+0x250>
 8005232:	2203      	movs	r2, #3
 8005234:	4650      	mov	r0, sl
 8005236:	7821      	ldrb	r1, [r4, #0]
 8005238:	f000 fa9e 	bl	8005778 <memchr>
 800523c:	b140      	cbz	r0, 8005250 <_vfiprintf_r+0x198>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	eba0 000a 	sub.w	r0, r0, sl
 8005244:	fa03 f000 	lsl.w	r0, r3, r0
 8005248:	9b04      	ldr	r3, [sp, #16]
 800524a:	3401      	adds	r4, #1
 800524c:	4303      	orrs	r3, r0
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	2206      	movs	r2, #6
 8005256:	482d      	ldr	r0, [pc, #180]	; (800530c <_vfiprintf_r+0x254>)
 8005258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525c:	f000 fa8c 	bl	8005778 <memchr>
 8005260:	2800      	cmp	r0, #0
 8005262:	d03f      	beq.n	80052e4 <_vfiprintf_r+0x22c>
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <_vfiprintf_r+0x258>)
 8005266:	bb1b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x1f8>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	3307      	adds	r3, #7
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	3308      	adds	r3, #8
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005276:	443b      	add	r3, r7
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	e767      	b.n	800514c <_vfiprintf_r+0x94>
 800527c:	460c      	mov	r4, r1
 800527e:	2001      	movs	r0, #1
 8005280:	fb0c 3202 	mla	r2, ip, r2, r3
 8005284:	e7a5      	b.n	80051d2 <_vfiprintf_r+0x11a>
 8005286:	2300      	movs	r3, #0
 8005288:	f04f 0c0a 	mov.w	ip, #10
 800528c:	4619      	mov	r1, r3
 800528e:	3401      	adds	r4, #1
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	4620      	mov	r0, r4
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_vfiprintf_r+0x1ee>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c5      	beq.n	800522e <_vfiprintf_r+0x176>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c3      	b.n	800522e <_vfiprintf_r+0x176>
 80052a6:	4604      	mov	r4, r0
 80052a8:	2301      	movs	r3, #1
 80052aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ae:	e7f0      	b.n	8005292 <_vfiprintf_r+0x1da>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4630      	mov	r0, r6
 80052b8:	4b16      	ldr	r3, [pc, #88]	; (8005314 <_vfiprintf_r+0x25c>)
 80052ba:	a904      	add	r1, sp, #16
 80052bc:	f3af 8000 	nop.w
 80052c0:	4607      	mov	r7, r0
 80052c2:	1c78      	adds	r0, r7, #1
 80052c4:	d1d6      	bne.n	8005274 <_vfiprintf_r+0x1bc>
 80052c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	d405      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	059a      	lsls	r2, r3, #22
 80052d0:	d402      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052d4:	f7ff fe55 	bl	8004f82 <__retarget_lock_release_recursive>
 80052d8:	89ab      	ldrh	r3, [r5, #12]
 80052da:	065b      	lsls	r3, r3, #25
 80052dc:	f53f af12 	bmi.w	8005104 <_vfiprintf_r+0x4c>
 80052e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052e2:	e711      	b.n	8005108 <_vfiprintf_r+0x50>
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	462a      	mov	r2, r5
 80052ea:	4630      	mov	r0, r6
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <_vfiprintf_r+0x25c>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	f000 f882 	bl	80053f8 <_printf_i>
 80052f4:	e7e4      	b.n	80052c0 <_vfiprintf_r+0x208>
 80052f6:	bf00      	nop
 80052f8:	08005a58 	.word	0x08005a58
 80052fc:	08005a78 	.word	0x08005a78
 8005300:	08005a38 	.word	0x08005a38
 8005304:	08005a98 	.word	0x08005a98
 8005308:	08005a9e 	.word	0x08005a9e
 800530c:	08005aa2 	.word	0x08005aa2
 8005310:	00000000 	.word	0x00000000
 8005314:	08005093 	.word	0x08005093

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4699      	mov	r9, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	4607      	mov	r7, r0
 8005326:	4293      	cmp	r3, r2
 8005328:	bfb8      	it	lt
 800532a:	4613      	movlt	r3, r2
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005332:	460c      	mov	r4, r1
 8005334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc28      	bgt.n	80053b2 <_printf_common+0x9a>
 8005360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005364:	1e13      	subs	r3, r2, #0
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42d      	bmi.n	80053cc <_printf_common+0xb4>
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d020      	beq.n	80053c0 <_printf_common+0xa8>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	68e5      	ldr	r5, [r4, #12]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf18      	it	ne
 800538a:	2500      	movne	r5, #0
 800538c:	6832      	ldr	r2, [r6, #0]
 800538e:	f04f 0600 	mov.w	r6, #0
 8005392:	68a3      	ldr	r3, [r4, #8]
 8005394:	bf08      	it	eq
 8005396:	1aad      	subeq	r5, r5, r2
 8005398:	6922      	ldr	r2, [r4, #16]
 800539a:	bf08      	it	eq
 800539c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a0:	4293      	cmp	r3, r2
 80053a2:	bfc4      	itt	gt
 80053a4:	1a9b      	subgt	r3, r3, r2
 80053a6:	18ed      	addgt	r5, r5, r3
 80053a8:	341a      	adds	r4, #26
 80053aa:	42b5      	cmp	r5, r6
 80053ac:	d11a      	bne.n	80053e4 <_printf_common+0xcc>
 80053ae:	2000      	movs	r0, #0
 80053b0:	e008      	b.n	80053c4 <_printf_common+0xac>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4652      	mov	r2, sl
 80053b6:	4649      	mov	r1, r9
 80053b8:	4638      	mov	r0, r7
 80053ba:	47c0      	blx	r8
 80053bc:	3001      	adds	r0, #1
 80053be:	d103      	bne.n	80053c8 <_printf_common+0xb0>
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c8:	3501      	adds	r5, #1
 80053ca:	e7c4      	b.n	8005356 <_printf_common+0x3e>
 80053cc:	2030      	movs	r0, #48	; 0x30
 80053ce:	18e1      	adds	r1, r4, r3
 80053d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053da:	4422      	add	r2, r4
 80053dc:	3302      	adds	r3, #2
 80053de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e2:	e7c5      	b.n	8005370 <_printf_common+0x58>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4622      	mov	r2, r4
 80053e8:	4649      	mov	r1, r9
 80053ea:	4638      	mov	r0, r7
 80053ec:	47c0      	blx	r8
 80053ee:	3001      	adds	r0, #1
 80053f0:	d0e6      	beq.n	80053c0 <_printf_common+0xa8>
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7d9      	b.n	80053aa <_printf_common+0x92>
	...

080053f8 <_printf_i>:
 80053f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	7e0f      	ldrb	r7, [r1, #24]
 80053fe:	4691      	mov	r9, r2
 8005400:	2f78      	cmp	r7, #120	; 0x78
 8005402:	4680      	mov	r8, r0
 8005404:	460c      	mov	r4, r1
 8005406:	469a      	mov	sl, r3
 8005408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800540a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800540e:	d807      	bhi.n	8005420 <_printf_i+0x28>
 8005410:	2f62      	cmp	r7, #98	; 0x62
 8005412:	d80a      	bhi.n	800542a <_printf_i+0x32>
 8005414:	2f00      	cmp	r7, #0
 8005416:	f000 80d9 	beq.w	80055cc <_printf_i+0x1d4>
 800541a:	2f58      	cmp	r7, #88	; 0x58
 800541c:	f000 80a4 	beq.w	8005568 <_printf_i+0x170>
 8005420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005428:	e03a      	b.n	80054a0 <_printf_i+0xa8>
 800542a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800542e:	2b15      	cmp	r3, #21
 8005430:	d8f6      	bhi.n	8005420 <_printf_i+0x28>
 8005432:	a101      	add	r1, pc, #4	; (adr r1, 8005438 <_printf_i+0x40>)
 8005434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005438:	08005491 	.word	0x08005491
 800543c:	080054a5 	.word	0x080054a5
 8005440:	08005421 	.word	0x08005421
 8005444:	08005421 	.word	0x08005421
 8005448:	08005421 	.word	0x08005421
 800544c:	08005421 	.word	0x08005421
 8005450:	080054a5 	.word	0x080054a5
 8005454:	08005421 	.word	0x08005421
 8005458:	08005421 	.word	0x08005421
 800545c:	08005421 	.word	0x08005421
 8005460:	08005421 	.word	0x08005421
 8005464:	080055b3 	.word	0x080055b3
 8005468:	080054d5 	.word	0x080054d5
 800546c:	08005595 	.word	0x08005595
 8005470:	08005421 	.word	0x08005421
 8005474:	08005421 	.word	0x08005421
 8005478:	080055d5 	.word	0x080055d5
 800547c:	08005421 	.word	0x08005421
 8005480:	080054d5 	.word	0x080054d5
 8005484:	08005421 	.word	0x08005421
 8005488:	08005421 	.word	0x08005421
 800548c:	0800559d 	.word	0x0800559d
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800549c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0a4      	b.n	80055ee <_printf_i+0x1f6>
 80054a4:	6820      	ldr	r0, [r4, #0]
 80054a6:	6829      	ldr	r1, [r5, #0]
 80054a8:	0606      	lsls	r6, r0, #24
 80054aa:	f101 0304 	add.w	r3, r1, #4
 80054ae:	d50a      	bpl.n	80054c6 <_printf_i+0xce>
 80054b0:	680e      	ldr	r6, [r1, #0]
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	2e00      	cmp	r6, #0
 80054b6:	da03      	bge.n	80054c0 <_printf_i+0xc8>
 80054b8:	232d      	movs	r3, #45	; 0x2d
 80054ba:	4276      	negs	r6, r6
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	230a      	movs	r3, #10
 80054c2:	485e      	ldr	r0, [pc, #376]	; (800563c <_printf_i+0x244>)
 80054c4:	e019      	b.n	80054fa <_printf_i+0x102>
 80054c6:	680e      	ldr	r6, [r1, #0]
 80054c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	bf18      	it	ne
 80054d0:	b236      	sxthne	r6, r6
 80054d2:	e7ef      	b.n	80054b4 <_printf_i+0xbc>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	1d19      	adds	r1, r3, #4
 80054da:	6029      	str	r1, [r5, #0]
 80054dc:	0601      	lsls	r1, r0, #24
 80054de:	d501      	bpl.n	80054e4 <_printf_i+0xec>
 80054e0:	681e      	ldr	r6, [r3, #0]
 80054e2:	e002      	b.n	80054ea <_printf_i+0xf2>
 80054e4:	0646      	lsls	r6, r0, #25
 80054e6:	d5fb      	bpl.n	80054e0 <_printf_i+0xe8>
 80054e8:	881e      	ldrh	r6, [r3, #0]
 80054ea:	2f6f      	cmp	r7, #111	; 0x6f
 80054ec:	bf0c      	ite	eq
 80054ee:	2308      	moveq	r3, #8
 80054f0:	230a      	movne	r3, #10
 80054f2:	4852      	ldr	r0, [pc, #328]	; (800563c <_printf_i+0x244>)
 80054f4:	2100      	movs	r1, #0
 80054f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fa:	6865      	ldr	r5, [r4, #4]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	bfa8      	it	ge
 8005500:	6821      	ldrge	r1, [r4, #0]
 8005502:	60a5      	str	r5, [r4, #8]
 8005504:	bfa4      	itt	ge
 8005506:	f021 0104 	bicge.w	r1, r1, #4
 800550a:	6021      	strge	r1, [r4, #0]
 800550c:	b90e      	cbnz	r6, 8005512 <_printf_i+0x11a>
 800550e:	2d00      	cmp	r5, #0
 8005510:	d04d      	beq.n	80055ae <_printf_i+0x1b6>
 8005512:	4615      	mov	r5, r2
 8005514:	fbb6 f1f3 	udiv	r1, r6, r3
 8005518:	fb03 6711 	mls	r7, r3, r1, r6
 800551c:	5dc7      	ldrb	r7, [r0, r7]
 800551e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005522:	4637      	mov	r7, r6
 8005524:	42bb      	cmp	r3, r7
 8005526:	460e      	mov	r6, r1
 8005528:	d9f4      	bls.n	8005514 <_printf_i+0x11c>
 800552a:	2b08      	cmp	r3, #8
 800552c:	d10b      	bne.n	8005546 <_printf_i+0x14e>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	07de      	lsls	r6, r3, #31
 8005532:	d508      	bpl.n	8005546 <_printf_i+0x14e>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	6861      	ldr	r1, [r4, #4]
 8005538:	4299      	cmp	r1, r3
 800553a:	bfde      	ittt	le
 800553c:	2330      	movle	r3, #48	; 0x30
 800553e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005546:	1b52      	subs	r2, r2, r5
 8005548:	6122      	str	r2, [r4, #16]
 800554a:	464b      	mov	r3, r9
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f8cd a000 	str.w	sl, [sp]
 8005554:	aa03      	add	r2, sp, #12
 8005556:	f7ff fedf 	bl	8005318 <_printf_common>
 800555a:	3001      	adds	r0, #1
 800555c:	d14c      	bne.n	80055f8 <_printf_i+0x200>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	b004      	add	sp, #16
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	4834      	ldr	r0, [pc, #208]	; (800563c <_printf_i+0x244>)
 800556a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800556e:	6829      	ldr	r1, [r5, #0]
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	f851 6b04 	ldr.w	r6, [r1], #4
 8005576:	6029      	str	r1, [r5, #0]
 8005578:	061d      	lsls	r5, r3, #24
 800557a:	d514      	bpl.n	80055a6 <_printf_i+0x1ae>
 800557c:	07df      	lsls	r7, r3, #31
 800557e:	bf44      	itt	mi
 8005580:	f043 0320 	orrmi.w	r3, r3, #32
 8005584:	6023      	strmi	r3, [r4, #0]
 8005586:	b91e      	cbnz	r6, 8005590 <_printf_i+0x198>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	2310      	movs	r3, #16
 8005592:	e7af      	b.n	80054f4 <_printf_i+0xfc>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	f043 0320 	orr.w	r3, r3, #32
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	2378      	movs	r3, #120	; 0x78
 800559e:	4828      	ldr	r0, [pc, #160]	; (8005640 <_printf_i+0x248>)
 80055a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055a4:	e7e3      	b.n	800556e <_printf_i+0x176>
 80055a6:	0659      	lsls	r1, r3, #25
 80055a8:	bf48      	it	mi
 80055aa:	b2b6      	uxthmi	r6, r6
 80055ac:	e7e6      	b.n	800557c <_printf_i+0x184>
 80055ae:	4615      	mov	r5, r2
 80055b0:	e7bb      	b.n	800552a <_printf_i+0x132>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	6826      	ldr	r6, [r4, #0]
 80055b6:	1d18      	adds	r0, r3, #4
 80055b8:	6961      	ldr	r1, [r4, #20]
 80055ba:	6028      	str	r0, [r5, #0]
 80055bc:	0635      	lsls	r5, r6, #24
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	d501      	bpl.n	80055c6 <_printf_i+0x1ce>
 80055c2:	6019      	str	r1, [r3, #0]
 80055c4:	e002      	b.n	80055cc <_printf_i+0x1d4>
 80055c6:	0670      	lsls	r0, r6, #25
 80055c8:	d5fb      	bpl.n	80055c2 <_printf_i+0x1ca>
 80055ca:	8019      	strh	r1, [r3, #0]
 80055cc:	2300      	movs	r3, #0
 80055ce:	4615      	mov	r5, r2
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	e7ba      	b.n	800554a <_printf_i+0x152>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2100      	movs	r1, #0
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	602a      	str	r2, [r5, #0]
 80055dc:	681d      	ldr	r5, [r3, #0]
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f8c9 	bl	8005778 <memchr>
 80055e6:	b108      	cbz	r0, 80055ec <_printf_i+0x1f4>
 80055e8:	1b40      	subs	r0, r0, r5
 80055ea:	6060      	str	r0, [r4, #4]
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	6123      	str	r3, [r4, #16]
 80055f0:	2300      	movs	r3, #0
 80055f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f6:	e7a8      	b.n	800554a <_printf_i+0x152>
 80055f8:	462a      	mov	r2, r5
 80055fa:	4649      	mov	r1, r9
 80055fc:	4640      	mov	r0, r8
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d0ab      	beq.n	800555e <_printf_i+0x166>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	079b      	lsls	r3, r3, #30
 800560a:	d413      	bmi.n	8005634 <_printf_i+0x23c>
 800560c:	68e0      	ldr	r0, [r4, #12]
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	4298      	cmp	r0, r3
 8005612:	bfb8      	it	lt
 8005614:	4618      	movlt	r0, r3
 8005616:	e7a4      	b.n	8005562 <_printf_i+0x16a>
 8005618:	2301      	movs	r3, #1
 800561a:	4632      	mov	r2, r6
 800561c:	4649      	mov	r1, r9
 800561e:	4640      	mov	r0, r8
 8005620:	47d0      	blx	sl
 8005622:	3001      	adds	r0, #1
 8005624:	d09b      	beq.n	800555e <_printf_i+0x166>
 8005626:	3501      	adds	r5, #1
 8005628:	68e3      	ldr	r3, [r4, #12]
 800562a:	9903      	ldr	r1, [sp, #12]
 800562c:	1a5b      	subs	r3, r3, r1
 800562e:	42ab      	cmp	r3, r5
 8005630:	dcf2      	bgt.n	8005618 <_printf_i+0x220>
 8005632:	e7eb      	b.n	800560c <_printf_i+0x214>
 8005634:	2500      	movs	r5, #0
 8005636:	f104 0619 	add.w	r6, r4, #25
 800563a:	e7f5      	b.n	8005628 <_printf_i+0x230>
 800563c:	08005aa9 	.word	0x08005aa9
 8005640:	08005aba 	.word	0x08005aba

08005644 <__sread>:
 8005644:	b510      	push	{r4, lr}
 8005646:	460c      	mov	r4, r1
 8005648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564c:	f000 f8a2 	bl	8005794 <_read_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	bfab      	itete	ge
 8005654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005656:	89a3      	ldrhlt	r3, [r4, #12]
 8005658:	181b      	addge	r3, r3, r0
 800565a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565e:	bfac      	ite	ge
 8005660:	6563      	strge	r3, [r4, #84]	; 0x54
 8005662:	81a3      	strhlt	r3, [r4, #12]
 8005664:	bd10      	pop	{r4, pc}

08005666 <__swrite>:
 8005666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	461f      	mov	r7, r3
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	4605      	mov	r5, r0
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	460c      	mov	r4, r1
 8005674:	4616      	mov	r6, r2
 8005676:	d505      	bpl.n	8005684 <__swrite+0x1e>
 8005678:	2302      	movs	r3, #2
 800567a:	2200      	movs	r2, #0
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f868 	bl	8005754 <_lseek_r>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	4632      	mov	r2, r6
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	4628      	mov	r0, r5
 8005690:	463b      	mov	r3, r7
 8005692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800569a:	f000 b817 	b.w	80056cc <_write_r>

0800569e <__sseek>:
 800569e:	b510      	push	{r4, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f000 f855 	bl	8005754 <_lseek_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	bf15      	itete	ne
 80056b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ba:	81a3      	strheq	r3, [r4, #12]
 80056bc:	bf18      	it	ne
 80056be:	81a3      	strhne	r3, [r4, #12]
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <__sclose>:
 80056c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c6:	f000 b813 	b.w	80056f0 <_close_r>
	...

080056cc <_write_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	2200      	movs	r2, #0
 80056d6:	4d05      	ldr	r5, [pc, #20]	; (80056ec <_write_r+0x20>)
 80056d8:	602a      	str	r2, [r5, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	f7fb fcd5 	bl	800108a <_write>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_write_r+0x1e>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_write_r+0x1e>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	20000a04 	.word	0x20000a04

080056f0 <_close_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	; (800570c <_close_r+0x1c>)
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	f7fb fce1 	bl	80010c2 <_close>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_close_r+0x1a>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_close_r+0x1a>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20000a04 	.word	0x20000a04

08005710 <_fstat_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	2300      	movs	r3, #0
 8005714:	4d06      	ldr	r5, [pc, #24]	; (8005730 <_fstat_r+0x20>)
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	f7fb fcdb 	bl	80010d8 <_fstat>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d102      	bne.n	800572c <_fstat_r+0x1c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	b103      	cbz	r3, 800572c <_fstat_r+0x1c>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	20000a04 	.word	0x20000a04

08005734 <_isatty_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	2300      	movs	r3, #0
 8005738:	4d05      	ldr	r5, [pc, #20]	; (8005750 <_isatty_r+0x1c>)
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fb fcd9 	bl	80010f6 <_isatty>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_isatty_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_isatty_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000a04 	.word	0x20000a04

08005754 <_lseek_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	2200      	movs	r2, #0
 800575e:	4d05      	ldr	r5, [pc, #20]	; (8005774 <_lseek_r+0x20>)
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fb fcd1 	bl	800110a <_lseek>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_lseek_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_lseek_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000a04 	.word	0x20000a04

08005778 <memchr>:
 8005778:	4603      	mov	r3, r0
 800577a:	b510      	push	{r4, lr}
 800577c:	b2c9      	uxtb	r1, r1
 800577e:	4402      	add	r2, r0
 8005780:	4293      	cmp	r3, r2
 8005782:	4618      	mov	r0, r3
 8005784:	d101      	bne.n	800578a <memchr+0x12>
 8005786:	2000      	movs	r0, #0
 8005788:	e003      	b.n	8005792 <memchr+0x1a>
 800578a:	7804      	ldrb	r4, [r0, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	428c      	cmp	r4, r1
 8005790:	d1f6      	bne.n	8005780 <memchr+0x8>
 8005792:	bd10      	pop	{r4, pc}

08005794 <_read_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	4611      	mov	r1, r2
 800579c:	2200      	movs	r2, #0
 800579e:	4d05      	ldr	r5, [pc, #20]	; (80057b4 <_read_r+0x20>)
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fb fc54 	bl	8001050 <_read>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_read_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_read_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000a04 	.word	0x20000a04

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
